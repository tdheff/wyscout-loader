/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Wyscout API (v3)
 * [Customer resources](https://www.hudl.com/support/wyscout) | [Customer support](https://www.hudl.com/support/contact)  [Wyscout Data resources](https://footballdata.wyscout.com/resources/)  **IMPORTANT: Version switching planned for July 20th 2021.**  On July 20th 2021 we will switch v3 as the Current version. V2 will become Legacy.  Please see [Versioning](#section/Versioning) section for any related details.  # Overview  This is the product documentation for our API service, in which you can find all definitions and technical information you may need.  # Authentication  ## Overview  This page explain how to authenticate to Wyscout APIs using Basic Access Authentication.  ## Using your client software  Depending on your client software you should be provided with a mechanism for supplying an username and password: that will build the required authentication headers automatically.  For example you can specify the -u argument with curl as username:password.  ## Supplying Basic Access Authentication headers  It is possible to construct the authentication headers manually:  * Build a string of the form username:password. * Encode the string in Base64 * Supply an `Authorization` header with content `Basic` followed by the encoded string.   For example, the string `Aladdin:OpenSesame` encodes to `QWxhZGRpbjpPcGVuU2VzYW1l` in base64,   so you would use this string `Authorization: Basic QWxhZGRpbjpPcGVuU2VzYW1l`  ## Rate limits  To avoid services overload requests are rate limited. The Wyscout API currently enforces a limit of **12** request per second per API Key.  If the rate limit is exceeded, the API will return the following HTTP 429 response:  ```json   {     \"error\": {       \"code\": 429,       \"message\": \"Too many requests\"     }   } ```  # Data glossary and definitions  At the following link you can find our Data Glossary that describes events, metrics and concepts used across the Wyscout API, Platform and reports.  <a href=\"https://dataglossary.wyscout.com/\" target=\"_blank\">Wyscout Data Glossary</a>   ## Pitch coordinates  ![Pitch map](assets/images/WyscoutDataCoordinates.png)  The event's coordinates depends on the subject. The subject's goal to be defended is always **x=0%** and the attack is always **x=100%**. All values are % expressed as **(x,y)**.  # Versioning  Wyscout gives you the chance to choose between three different sets of API endpoints.  ## Current The latest available version. It includes the most recent endpoints and improvements.  ## Preview The beta version of our next official release. Here we start to implement future improvements and new endpoints.  ## Legacy The old version. This is still available and running, in order to let users adapt their tools to new ones.  ## Version Switch  Wyscout will constantly improve its dataset by adding new endpoints and improving the existing ones. “Preview” version is where you can find last delivered updates. When a new and improved “Current” version is released, the previous version becomes “Legacy” – which means it will not immediately cease to exist, giving you the time to adapt your systems. It will be available and running until another new version – “Current” – is released, at least six months after the previous one.  ![Version Switch](assets/images/WyscoutVersionSwitch.png)  Documentation on [apidocs.wyscout.com](apidocs.wyscout.com) will always be available also for “Legacy” version. Each version will receive support as from the following table:  ![Version Support](assets/images/WyscoutVersionSupport.png)
 *
 * OpenAPI spec version: 2023-08-22T14:26:33Z
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
const BASE_PATH = "https://apirest.wyscout.com/v3".replace(/\/+$/, "");
/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, fetch = isomorphicFetch) {
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
    }
}
/**
 * @export
 * @namespace Coach
 */
export var Coach;
(function (Coach) {
    /**
     * @export
     * @enum {string}
     */
    let GenderEnum;
    (function (GenderEnum) {
        GenderEnum[GenderEnum["Male"] = 'male'] = "Male";
        GenderEnum[GenderEnum["Female"] = 'female'] = "Female";
    })(GenderEnum = Coach.GenderEnum || (Coach.GenderEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Active"] = 'active'] = "Active";
        StatusEnum[StatusEnum["Retired"] = 'retired'] = "Retired";
        StatusEnum[StatusEnum["Died"] = 'died'] = "Died";
    })(StatusEnum = Coach.StatusEnum || (Coach.StatusEnum = {}));
})(Coach || (Coach = {}));
/**
 * @export
 * @namespace Competition
 */
export var Competition;
(function (Competition) {
    /**
     * @export
     * @enum {string}
     */
    let CategoryEnum;
    (function (CategoryEnum) {
        CategoryEnum[CategoryEnum["Default"] = 'default'] = "Default";
        CategoryEnum[CategoryEnum["U13"] = 'U13'] = "U13";
        CategoryEnum[CategoryEnum["U14"] = 'U14'] = "U14";
        CategoryEnum[CategoryEnum["U15"] = 'U15'] = "U15";
        CategoryEnum[CategoryEnum["U16"] = 'U16'] = "U16";
        CategoryEnum[CategoryEnum["U17"] = 'U17'] = "U17";
        CategoryEnum[CategoryEnum["U18"] = 'U18'] = "U18";
        CategoryEnum[CategoryEnum["U19"] = 'U19'] = "U19";
        CategoryEnum[CategoryEnum["U20"] = 'U20'] = "U20";
        CategoryEnum[CategoryEnum["U21"] = 'U21'] = "U21";
        CategoryEnum[CategoryEnum["U23"] = 'U23'] = "U23";
    })(CategoryEnum = Competition.CategoryEnum || (Competition.CategoryEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let DivisionLevelEnum;
    (function (DivisionLevelEnum) {
        DivisionLevelEnum[DivisionLevelEnum["NUMBER_0"] = 0] = "NUMBER_0";
        DivisionLevelEnum[DivisionLevelEnum["NUMBER_1"] = 1] = "NUMBER_1";
        DivisionLevelEnum[DivisionLevelEnum["NUMBER_2"] = 2] = "NUMBER_2";
        DivisionLevelEnum[DivisionLevelEnum["NUMBER_3"] = 3] = "NUMBER_3";
        DivisionLevelEnum[DivisionLevelEnum["NUMBER_4"] = 4] = "NUMBER_4";
        DivisionLevelEnum[DivisionLevelEnum["NUMBER_5"] = 5] = "NUMBER_5";
    })(DivisionLevelEnum = Competition.DivisionLevelEnum || (Competition.DivisionLevelEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let FormatEnum;
    (function (FormatEnum) {
        FormatEnum[FormatEnum["DomesticCup"] = 'Domestic cup'] = "DomesticCup";
        FormatEnum[FormatEnum["DomesticLeague"] = 'Domestic league'] = "DomesticLeague";
        FormatEnum[FormatEnum["DomesticSuperCup"] = 'Domestic super cup'] = "DomesticSuperCup";
        FormatEnum[FormatEnum["InternationalCup"] = 'International cup'] = "InternationalCup";
        FormatEnum[FormatEnum["InternationalSuperCup"] = 'International super cup'] = "InternationalSuperCup";
    })(FormatEnum = Competition.FormatEnum || (Competition.FormatEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let GenderEnum;
    (function (GenderEnum) {
        GenderEnum[GenderEnum["Male"] = 'male'] = "Male";
        GenderEnum[GenderEnum["Female"] = 'female'] = "Female";
    })(GenderEnum = Competition.GenderEnum || (Competition.GenderEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Club"] = 'club'] = "Club";
        TypeEnum[TypeEnum["International"] = 'international'] = "International";
    })(TypeEnum = Competition.TypeEnum || (Competition.TypeEnum = {}));
})(Competition || (Competition = {}));
/**
 * @export
 * @namespace CompetitionMatchesMatches
 */
export var CompetitionMatchesMatches;
(function (CompetitionMatchesMatches) {
    /**
     * @export
     * @enum {string}
     */
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Fixture"] = 'Fixture'] = "Fixture";
        StatusEnum[StatusEnum["Played"] = 'Played'] = "Played";
    })(StatusEnum = CompetitionMatchesMatches.StatusEnum || (CompetitionMatchesMatches.StatusEnum = {}));
})(CompetitionMatchesMatches || (CompetitionMatchesMatches = {}));
/**
 * @export
 * @namespace FormationSchema
 */
export var FormationSchema;
(function (FormationSchema) {
    /**
     * @export
     * @enum {string}
     */
    let MatchPeriodEnum;
    (function (MatchPeriodEnum) {
        MatchPeriodEnum[MatchPeriodEnum["_1H"] = '1H'] = "_1H";
        MatchPeriodEnum[MatchPeriodEnum["_2H"] = '2H'] = "_2H";
        MatchPeriodEnum[MatchPeriodEnum["E1"] = 'E1'] = "E1";
        MatchPeriodEnum[MatchPeriodEnum["E2"] = 'E2'] = "E2";
        MatchPeriodEnum[MatchPeriodEnum["P"] = 'P'] = "P";
    })(MatchPeriodEnum = FormationSchema.MatchPeriodEnum || (FormationSchema.MatchPeriodEnum = {}));
})(FormationSchema || (FormationSchema = {}));
/**
 * @export
 * @namespace FormationSchemaPlayerId
 */
export var FormationSchemaPlayerId;
(function (FormationSchemaPlayerId) {
    /**
     * @export
     * @enum {string}
     */
    let PositionEnum;
    (function (PositionEnum) {
        PositionEnum[PositionEnum["Gk"] = 'gk'] = "Gk";
        PositionEnum[PositionEnum["Rb"] = 'rb'] = "Rb";
        PositionEnum[PositionEnum["Rcb"] = 'rcb'] = "Rcb";
        PositionEnum[PositionEnum["Lcb"] = 'lcb'] = "Lcb";
        PositionEnum[PositionEnum["Lb"] = 'lb'] = "Lb";
        PositionEnum[PositionEnum["Rw"] = 'rw'] = "Rw";
        PositionEnum[PositionEnum["Rcmf"] = 'rcmf'] = "Rcmf";
        PositionEnum[PositionEnum["Lcmf"] = 'lcmf'] = "Lcmf";
        PositionEnum[PositionEnum["Lw"] = 'lw'] = "Lw";
        PositionEnum[PositionEnum["Ss"] = 'ss'] = "Ss";
        PositionEnum[PositionEnum["Cf"] = 'cf'] = "Cf";
        PositionEnum[PositionEnum["Amf"] = 'amf'] = "Amf";
        PositionEnum[PositionEnum["Rcmf3"] = 'rcmf3'] = "Rcmf3";
        PositionEnum[PositionEnum["Dmf"] = 'dmf'] = "Dmf";
        PositionEnum[PositionEnum["Lcmf3"] = 'lcmf3'] = "Lcmf3";
        PositionEnum[PositionEnum["Rdmf"] = 'rdmf'] = "Rdmf";
        PositionEnum[PositionEnum["Ldmf"] = 'ldmf'] = "Ldmf";
        PositionEnum[PositionEnum["Ramf"] = 'ramf'] = "Ramf";
        PositionEnum[PositionEnum["Lamf"] = 'lamf'] = "Lamf";
        PositionEnum[PositionEnum["Rwf"] = 'rwf'] = "Rwf";
        PositionEnum[PositionEnum["Lwf"] = 'lwf'] = "Lwf";
        PositionEnum[PositionEnum["Rcb3"] = 'rcb3'] = "Rcb3";
        PositionEnum[PositionEnum["Cb"] = 'cb'] = "Cb";
        PositionEnum[PositionEnum["Lcb3"] = 'lcb3'] = "Lcb3";
        PositionEnum[PositionEnum["Rwb"] = 'rwb'] = "Rwb";
        PositionEnum[PositionEnum["Lwb"] = 'lwb'] = "Lwb";
        PositionEnum[PositionEnum["Rb5"] = 'rb5'] = "Rb5";
        PositionEnum[PositionEnum["Lb5"] = 'lb5'] = "Lb5";
    })(PositionEnum = FormationSchemaPlayerId.PositionEnum || (FormationSchemaPlayerId.PositionEnum = {}));
})(FormationSchemaPlayerId || (FormationSchemaPlayerId = {}));
/**
 * @export
 * @namespace Match
 */
export var Match;
(function (Match) {
    /**
     * @export
     * @enum {string}
     */
    let DurationEnum;
    (function (DurationEnum) {
        DurationEnum[DurationEnum["Regular"] = 'Regular'] = "Regular";
        DurationEnum[DurationEnum["GoldenGoal"] = 'GoldenGoal'] = "GoldenGoal";
        DurationEnum[DurationEnum["SilverGoal"] = 'SilverGoal'] = "SilverGoal";
        DurationEnum[DurationEnum["ExtraTime"] = 'ExtraTime'] = "ExtraTime";
        DurationEnum[DurationEnum["Penalties"] = 'Penalties'] = "Penalties";
    })(DurationEnum = Match.DurationEnum || (Match.DurationEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Cancelled"] = 'Cancelled'] = "Cancelled";
        StatusEnum[StatusEnum["Fixture"] = 'Fixture'] = "Fixture";
        StatusEnum[StatusEnum["Played"] = 'Played'] = "Played";
        StatusEnum[StatusEnum["Playing"] = 'Playing'] = "Playing";
        StatusEnum[StatusEnum["Postponed"] = 'Postponed'] = "Postponed";
        StatusEnum[StatusEnum["Suspended"] = 'Suspended'] = "Suspended";
        StatusEnum[StatusEnum["Awarded"] = 'Awarded'] = "Awarded";
    })(StatusEnum = Match.StatusEnum || (Match.StatusEnum = {}));
})(Match || (Match = {}));
/**
 * @export
 * @namespace MatchReferees
 */
export var MatchReferees;
(function (MatchReferees) {
    /**
     * @export
     * @enum {string}
     */
    let RoleEnum;
    (function (RoleEnum) {
        RoleEnum[RoleEnum["Referee"] = 'referee'] = "Referee";
        RoleEnum[RoleEnum["FirstAssistant"] = 'firstAssistant'] = "FirstAssistant";
        RoleEnum[RoleEnum["SecondAssistant"] = 'secondAssistant'] = "SecondAssistant";
        RoleEnum[RoleEnum["FourthOfficial"] = 'fourthOfficial'] = "FourthOfficial";
        RoleEnum[RoleEnum["FirstAdditionalAssistant"] = 'firstAdditionalAssistant'] = "FirstAdditionalAssistant";
        RoleEnum[RoleEnum["SecondAdditionalAssistant"] = 'secondAdditionalAssistant'] = "SecondAdditionalAssistant";
    })(RoleEnum = MatchReferees.RoleEnum || (MatchReferees.RoleEnum = {}));
})(MatchReferees || (MatchReferees = {}));
/**
 * @export
 * @namespace MatchTeamData
 */
export var MatchTeamData;
(function (MatchTeamData) {
    /**
     * @export
     * @enum {string}
     */
    let SideEnum;
    (function (SideEnum) {
        SideEnum[SideEnum["Home"] = 'home'] = "Home";
        SideEnum[SideEnum["Away"] = 'away'] = "Away";
        SideEnum[SideEnum["None"] = 'none'] = "None";
    })(SideEnum = MatchTeamData.SideEnum || (MatchTeamData.SideEnum = {}));
})(MatchTeamData || (MatchTeamData = {}));
/**
 * @export
 * @namespace Round
 */
export var Round;
(function (Round) {
    /**
     * @export
     * @enum {string}
     */
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Table"] = 'table'] = "Table";
        TypeEnum[TypeEnum["Cup"] = 'cup'] = "Cup";
    })(TypeEnum = Round.TypeEnum || (Round.TypeEnum = {}));
})(Round || (Round = {}));
/**
 * @export
 * @namespace Team
 */
export var Team;
(function (Team) {
    /**
     * @export
     * @enum {string}
     */
    let CategoryEnum;
    (function (CategoryEnum) {
        CategoryEnum[CategoryEnum["Default"] = 'default'] = "Default";
        CategoryEnum[CategoryEnum["Youth"] = 'youth'] = "Youth";
    })(CategoryEnum = Team.CategoryEnum || (Team.CategoryEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let GenderEnum;
    (function (GenderEnum) {
        GenderEnum[GenderEnum["Male"] = 'male'] = "Male";
        GenderEnum[GenderEnum["Female"] = 'female'] = "Female";
    })(GenderEnum = Team.GenderEnum || (Team.GenderEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Club"] = 'club'] = "Club";
        TypeEnum[TypeEnum["National"] = 'national'] = "National";
    })(TypeEnum = Team.TypeEnum || (Team.TypeEnum = {}));
})(Team || (Team = {}));
/**
 * @export
 * @namespace TeamMatchesMatches
 */
export var TeamMatchesMatches;
(function (TeamMatchesMatches) {
    /**
     * @export
     * @enum {string}
     */
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Fixture"] = 'Fixture'] = "Fixture";
        StatusEnum[StatusEnum["Played"] = 'Played'] = "Played";
    })(StatusEnum = TeamMatchesMatches.StatusEnum || (TeamMatchesMatches.StatusEnum = {}));
})(TeamMatchesMatches || (TeamMatchesMatches = {}));
/**
 * @export
 * @namespace TheMatchGoalObject
 */
export var TheMatchGoalObject;
(function (TheMatchGoalObject) {
    /**
     * @export
     * @enum {string}
     */
    let PeriodEnum;
    (function (PeriodEnum) {
        PeriodEnum[PeriodEnum["FirstHalf"] = 'FirstHalf'] = "FirstHalf";
        PeriodEnum[PeriodEnum["SecondHalf"] = 'SecondHalf'] = "SecondHalf";
        PeriodEnum[PeriodEnum["ExtraFirstHalf"] = 'ExtraFirstHalf'] = "ExtraFirstHalf";
        PeriodEnum[PeriodEnum["ExtraSecondHalf"] = 'ExtraSecondHalf'] = "ExtraSecondHalf";
        PeriodEnum[PeriodEnum["Shootout"] = 'Shootout'] = "Shootout";
    })(PeriodEnum = TheMatchGoalObject.PeriodEnum || (TheMatchGoalObject.PeriodEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Goal"] = 'goal'] = "Goal";
        TypeEnum[TypeEnum["Own"] = 'own'] = "Own";
        TypeEnum[TypeEnum["Penalty"] = 'penalty'] = "Penalty";
    })(TypeEnum = TheMatchGoalObject.TypeEnum || (TheMatchGoalObject.TypeEnum = {}));
})(TheMatchGoalObject || (TheMatchGoalObject = {}));
/**
 * @export
 * @namespace TheMatchesObject
 */
export var TheMatchesObject;
(function (TheMatchesObject) {
    /**
     * @export
     * @enum {string}
     */
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Fixture"] = 'Fixture'] = "Fixture";
    })(StatusEnum = TheMatchesObject.StatusEnum || (TheMatchesObject.StatusEnum = {}));
})(TheMatchesObject || (TheMatchesObject = {}));
/**
 * @export
 * @namespace TheMatchesObject1
 */
export var TheMatchesObject1;
(function (TheMatchesObject1) {
    /**
     * @export
     * @enum {string}
     */
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Fixture"] = 'Fixture'] = "Fixture";
        StatusEnum[StatusEnum["Played"] = 'Played'] = "Played";
    })(StatusEnum = TheMatchesObject1.StatusEnum || (TheMatchesObject1.StatusEnum = {}));
})(TheMatchesObject1 || (TheMatchesObject1 = {}));
/**
 * @export
 * @namespace TheMatchesObject2
 */
export var TheMatchesObject2;
(function (TheMatchesObject2) {
    /**
     * @export
     * @enum {string}
     */
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Fixture"] = 'Fixture'] = "Fixture";
    })(StatusEnum = TheMatchesObject2.StatusEnum || (TheMatchesObject2.StatusEnum = {}));
})(TheMatchesObject2 || (TheMatchesObject2 = {}));
/**
 * @export
 * @namespace TheSeasonMatchObject
 */
export var TheSeasonMatchObject;
(function (TheSeasonMatchObject) {
    /**
     * @export
     * @enum {string}
     */
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum[StatusEnum["Fixture"] = 'Fixture'] = "Fixture";
        StatusEnum[StatusEnum["Played"] = 'Played'] = "Played";
    })(StatusEnum = TheSeasonMatchObject.StatusEnum || (TheSeasonMatchObject.StatusEnum = {}));
})(TheSeasonMatchObject || (TheSeasonMatchObject = {}));
/**
 * @export
 * @namespace TheTransferObject
 */
export var TheTransferObject;
(function (TheTransferObject) {
    /**
     * @export
     * @enum {string}
     */
    let CurrencyEnum;
    (function (CurrencyEnum) {
        CurrencyEnum[CurrencyEnum["USD"] = 'USD'] = "USD";
        CurrencyEnum[CurrencyEnum["EUR"] = 'EUR'] = "EUR";
        CurrencyEnum[CurrencyEnum["GBP"] = 'GBP'] = "GBP";
    })(CurrencyEnum = TheTransferObject.CurrencyEnum || (TheTransferObject.CurrencyEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Transfer"] = 'Transfer'] = "Transfer";
        TypeEnum[TypeEnum["FreeTransfer"] = 'Free Transfer'] = "FreeTransfer";
        TypeEnum[TypeEnum["Loan"] = 'Loan'] = "Loan";
        TypeEnum[TypeEnum["BackFromLoan"] = 'Back from Loan'] = "BackFromLoan";
        TypeEnum[TypeEnum["FreeAgent"] = 'Free Agent'] = "FreeAgent";
        TypeEnum[TypeEnum["PlayerSwap"] = 'Player Swap'] = "PlayerSwap";
        TypeEnum[TypeEnum["Trial"] = 'Trial'] = "Trial";
    })(TypeEnum = TheTransferObject.TypeEnum || (TheTransferObject.TypeEnum = {}));
})(TheTransferObject || (TheTransferObject = {}));
/**
 * @export
 * @namespace TheTransferObject1
 */
export var TheTransferObject1;
(function (TheTransferObject1) {
    /**
     * @export
     * @enum {string}
     */
    let CurrencyEnum;
    (function (CurrencyEnum) {
        CurrencyEnum[CurrencyEnum["USD"] = 'USD'] = "USD";
        CurrencyEnum[CurrencyEnum["EUR"] = 'EUR'] = "EUR";
        CurrencyEnum[CurrencyEnum["GBP"] = 'GBP'] = "GBP";
    })(CurrencyEnum = TheTransferObject1.CurrencyEnum || (TheTransferObject1.CurrencyEnum = {}));
    /**
     * @export
     * @enum {string}
     */
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum[TypeEnum["Transfer"] = 'Transfer'] = "Transfer";
        TypeEnum[TypeEnum["FreeTransfer"] = 'Free Transfer'] = "FreeTransfer";
        TypeEnum[TypeEnum["Loan"] = 'Loan'] = "Loan";
        TypeEnum[TypeEnum["BackFromLoan"] = 'Back from Loan'] = "BackFromLoan";
        TypeEnum[TypeEnum["FreeAgent"] = 'Free Agent'] = "FreeAgent";
        TypeEnum[TypeEnum["PlayerSwap"] = 'Player Swap'] = "PlayerSwap";
        TypeEnum[TypeEnum["Trial"] = 'Trial'] = "Trial";
    })(TypeEnum = TheTransferObject1.TypeEnum || (TheTransferObject1.TypeEnum = {}));
})(TheTransferObject1 || (TheTransferObject1 = {}));
/**
 * AdvancedStatsApi - fetch parameter creator
 * @export
 */
export const AdvancedStatsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Returns advanced statistics of a given match
         * @summary Match Advanced Stats
         * @param {string} wyId Relevant content id
         * @param {string} [useSides] Flag to change label (&lt;teamId&gt; –&gt; home or &lt;teamId&gt; –&gt; away)
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;, &#x60;match&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdAdvancedstatsGet(wyId, useSides, details, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling matchesWyIdAdvancedstatsGet.');
            }
            const localVarPath = `/matches/{wyId}/advancedstats`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (useSides !== undefined) {
                localVarQueryParameter['useSides'] = useSides;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns advanced statistics of all players in a specific match
         * @summary All players Match Advanced Stats
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;, &#x60;match&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;player&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdAdvancedstatsPlayersGet(wyId, fetch, details, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling matchesWyIdAdvancedstatsPlayersGet.');
            }
            const localVarPath = `/matches/{wyId}/advancedstats/players`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns advanced statistics of a given player in a specific competition season. Overall, the statistics provided are relative to the selected season, and not to a specific team. By default the season is set to the current one
         * @summary Player Advanced Stats
         * @param {string} compId Competition wyId
         * @param {string} wyId Relevant content id
         * @param {string} [roundId] Relevant round id
         * @param {string} [matchDay] If present, only match data for a single day are returned
         * @param {string} [authorization]
         * @param {string} [seasonId] Relevant season id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;player&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdAdvancedstatsGet(compId, wyId, roundId, matchDay, authorization, seasonId, fetch, details, options = {}) {
            // verify required parameter 'compId' is not null or undefined
            if (compId === null || compId === undefined) {
                throw new RequiredError('compId', 'Required parameter compId was null or undefined when calling playersWyIdAdvancedstatsGet.');
            }
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdAdvancedstatsGet.');
            }
            const localVarPath = `/players/{wyId}/advancedstats`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (roundId !== undefined) {
                localVarQueryParameter['roundId'] = roundId;
            }
            if (compId !== undefined) {
                localVarQueryParameter['compId'] = compId;
            }
            if (matchDay !== undefined) {
                localVarQueryParameter['matchDay'] = matchDay;
            }
            if (seasonId !== undefined) {
                localVarQueryParameter['seasonId'] = seasonId;
            }
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns advanced statistics of a given player in a specific match
         * @summary Players match advanced stats
         * @param {string} wyId Relevant content id
         * @param {string} matchWyId Relevant match id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;, &#x60;match&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;player&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdMatchesMatchWyIdAdvancedstatsGet(wyId, matchWyId, fetch, details, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdMatchesMatchWyIdAdvancedstatsGet.');
            }
            // verify required parameter 'matchWyId' is not null or undefined
            if (matchWyId === null || matchWyId === undefined) {
                throw new RequiredError('matchWyId', 'Required parameter matchWyId was null or undefined when calling playersWyIdMatchesMatchWyIdAdvancedstatsGet.');
            }
            const localVarPath = `/players/{wyId}/matches/{matchWyId}/advancedstats`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)))
                .replace(`{${"matchWyId"}}`, encodeURIComponent(String(matchWyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns advanced statistics of a given team in a specific competition season. By default the season is set to the current one.
         * @summary Teams Advanced Stats
         * @param {string} compId Competition wyId
         * @param {string} wyId Relevant content id
         * @param {string} [roundId] Relevant round id
         * @param {string} [matchDay] If present, only match data for a single day are returned
         * @param {string} [authorization]
         * @param {string} [seasonId] Relevant season id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;team&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdAdvancedstatsGet(compId, wyId, roundId, matchDay, authorization, seasonId, fetch, details, options = {}) {
            // verify required parameter 'compId' is not null or undefined
            if (compId === null || compId === undefined) {
                throw new RequiredError('compId', 'Required parameter compId was null or undefined when calling teamsWyIdAdvancedstatsGet.');
            }
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdAdvancedstatsGet.');
            }
            const localVarPath = `/teams/{wyId}/advancedstats`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (roundId !== undefined) {
                localVarQueryParameter['roundId'] = roundId;
            }
            if (compId !== undefined) {
                localVarQueryParameter['compId'] = compId;
            }
            if (matchDay !== undefined) {
                localVarQueryParameter['matchDay'] = matchDay;
            }
            if (seasonId !== undefined) {
                localVarQueryParameter['seasonId'] = seasonId;
            }
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves information about a given match's statistics
         * @summary Teams match advanced stats
         * @param {string} wyId Relevant content id
         * @param {string} matchWyId Relevant match id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;team&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdMatchesMatchWyIdAdvancedstatsGet(wyId, matchWyId, fetch, details, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdMatchesMatchWyIdAdvancedstatsGet.');
            }
            // verify required parameter 'matchWyId' is not null or undefined
            if (matchWyId === null || matchWyId === undefined) {
                throw new RequiredError('matchWyId', 'Required parameter matchWyId was null or undefined when calling teamsWyIdMatchesMatchWyIdAdvancedstatsGet.');
            }
            const localVarPath = `/teams/{wyId}/matches/{matchWyId}/advancedstats`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)))
                .replace(`{${"matchWyId"}}`, encodeURIComponent(String(matchWyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AdvancedStatsApi - functional programming interface
 * @export
 */
export const AdvancedStatsApiFp = function (configuration) {
    return {
        /**
         * Returns advanced statistics of a given match
         * @summary Match Advanced Stats
         * @param {string} wyId Relevant content id
         * @param {string} [useSides] Flag to change label (&lt;teamId&gt; –&gt; home or &lt;teamId&gt; –&gt; away)
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;, &#x60;match&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdAdvancedstatsGet(wyId, useSides, details, authorization, options) {
            const localVarFetchArgs = AdvancedStatsApiFetchParamCreator(configuration).matchesWyIdAdvancedstatsGet(wyId, useSides, details, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns advanced statistics of all players in a specific match
         * @summary All players Match Advanced Stats
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;, &#x60;match&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;player&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdAdvancedstatsPlayersGet(wyId, fetch, details, authorization, options) {
            const localVarFetchArgs = AdvancedStatsApiFetchParamCreator(configuration).matchesWyIdAdvancedstatsPlayersGet(wyId, fetch, details, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns advanced statistics of a given player in a specific competition season. Overall, the statistics provided are relative to the selected season, and not to a specific team. By default the season is set to the current one
         * @summary Player Advanced Stats
         * @param {string} compId Competition wyId
         * @param {string} wyId Relevant content id
         * @param {string} [roundId] Relevant round id
         * @param {string} [matchDay] If present, only match data for a single day are returned
         * @param {string} [authorization]
         * @param {string} [seasonId] Relevant season id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;player&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdAdvancedstatsGet(compId, wyId, roundId, matchDay, authorization, seasonId, fetch, details, options) {
            const localVarFetchArgs = AdvancedStatsApiFetchParamCreator(configuration).playersWyIdAdvancedstatsGet(compId, wyId, roundId, matchDay, authorization, seasonId, fetch, details, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns advanced statistics of a given player in a specific match
         * @summary Players match advanced stats
         * @param {string} wyId Relevant content id
         * @param {string} matchWyId Relevant match id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;, &#x60;match&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;player&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdMatchesMatchWyIdAdvancedstatsGet(wyId, matchWyId, fetch, details, authorization, options) {
            const localVarFetchArgs = AdvancedStatsApiFetchParamCreator(configuration).playersWyIdMatchesMatchWyIdAdvancedstatsGet(wyId, matchWyId, fetch, details, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns advanced statistics of a given team in a specific competition season. By default the season is set to the current one.
         * @summary Teams Advanced Stats
         * @param {string} compId Competition wyId
         * @param {string} wyId Relevant content id
         * @param {string} [roundId] Relevant round id
         * @param {string} [matchDay] If present, only match data for a single day are returned
         * @param {string} [authorization]
         * @param {string} [seasonId] Relevant season id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;team&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdAdvancedstatsGet(compId, wyId, roundId, matchDay, authorization, seasonId, fetch, details, options) {
            const localVarFetchArgs = AdvancedStatsApiFetchParamCreator(configuration).teamsWyIdAdvancedstatsGet(compId, wyId, roundId, matchDay, authorization, seasonId, fetch, details, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves information about a given match's statistics
         * @summary Teams match advanced stats
         * @param {string} wyId Relevant content id
         * @param {string} matchWyId Relevant match id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;team&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdMatchesMatchWyIdAdvancedstatsGet(wyId, matchWyId, fetch, details, authorization, options) {
            const localVarFetchArgs = AdvancedStatsApiFetchParamCreator(configuration).teamsWyIdMatchesMatchWyIdAdvancedstatsGet(wyId, matchWyId, fetch, details, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AdvancedStatsApi - factory interface
 * @export
 */
export const AdvancedStatsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Returns advanced statistics of a given match
         * @summary Match Advanced Stats
         * @param {string} wyId Relevant content id
         * @param {string} [useSides] Flag to change label (&lt;teamId&gt; –&gt; home or &lt;teamId&gt; –&gt; away)
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;, &#x60;match&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdAdvancedstatsGet(wyId, useSides, details, authorization, options) {
            return AdvancedStatsApiFp(configuration).matchesWyIdAdvancedstatsGet(wyId, useSides, details, authorization, options)(fetch, basePath);
        },
        /**
         * Returns advanced statistics of all players in a specific match
         * @summary All players Match Advanced Stats
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;, &#x60;match&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;player&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdAdvancedstatsPlayersGet(wyId, fetch, details, authorization, options) {
            return AdvancedStatsApiFp(configuration).matchesWyIdAdvancedstatsPlayersGet(wyId, fetch, details, authorization, options)(fetch, basePath);
        },
        /**
         * Returns advanced statistics of a given player in a specific competition season. Overall, the statistics provided are relative to the selected season, and not to a specific team. By default the season is set to the current one
         * @summary Player Advanced Stats
         * @param {string} compId Competition wyId
         * @param {string} wyId Relevant content id
         * @param {string} [roundId] Relevant round id
         * @param {string} [matchDay] If present, only match data for a single day are returned
         * @param {string} [authorization]
         * @param {string} [seasonId] Relevant season id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;player&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdAdvancedstatsGet(compId, wyId, roundId, matchDay, authorization, seasonId, fetch, details, options) {
            return AdvancedStatsApiFp(configuration).playersWyIdAdvancedstatsGet(compId, wyId, roundId, matchDay, authorization, seasonId, fetch, details, options)(fetch, basePath);
        },
        /**
         * Returns advanced statistics of a given player in a specific match
         * @summary Players match advanced stats
         * @param {string} wyId Relevant content id
         * @param {string} matchWyId Relevant match id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;, &#x60;match&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;player&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdMatchesMatchWyIdAdvancedstatsGet(wyId, matchWyId, fetch, details, authorization, options) {
            return AdvancedStatsApiFp(configuration).playersWyIdMatchesMatchWyIdAdvancedstatsGet(wyId, matchWyId, fetch, details, authorization, options)(fetch, basePath);
        },
        /**
         * Returns advanced statistics of a given team in a specific competition season. By default the season is set to the current one.
         * @summary Teams Advanced Stats
         * @param {string} compId Competition wyId
         * @param {string} wyId Relevant content id
         * @param {string} [roundId] Relevant round id
         * @param {string} [matchDay] If present, only match data for a single day are returned
         * @param {string} [authorization]
         * @param {string} [seasonId] Relevant season id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;team&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdAdvancedstatsGet(compId, wyId, roundId, matchDay, authorization, seasonId, fetch, details, options) {
            return AdvancedStatsApiFp(configuration).teamsWyIdAdvancedstatsGet(compId, wyId, roundId, matchDay, authorization, seasonId, fetch, details, options)(fetch, basePath);
        },
        /**
         * Retrieves information about a given match's statistics
         * @summary Teams match advanced stats
         * @param {string} wyId Relevant content id
         * @param {string} matchWyId Relevant match id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;team&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdMatchesMatchWyIdAdvancedstatsGet(wyId, matchWyId, fetch, details, authorization, options) {
            return AdvancedStatsApiFp(configuration).teamsWyIdMatchesMatchWyIdAdvancedstatsGet(wyId, matchWyId, fetch, details, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * AdvancedStatsApi - object-oriented interface
 * @export
 * @class AdvancedStatsApi
 * @extends {BaseAPI}
 */
export class AdvancedStatsApi extends BaseAPI {
    /**
     * Returns advanced statistics of a given match
     * @summary Match Advanced Stats
     * @param {string} wyId Relevant content id
     * @param {string} [useSides] Flag to change label (&lt;teamId&gt; –&gt; home or &lt;teamId&gt; –&gt; away)
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;, &#x60;match&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvancedStatsApi
     */
    matchesWyIdAdvancedstatsGet(wyId, useSides, details, authorization, options) {
        return AdvancedStatsApiFp(this.configuration).matchesWyIdAdvancedstatsGet(wyId, useSides, details, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns advanced statistics of all players in a specific match
     * @summary All players Match Advanced Stats
     * @param {string} wyId Relevant content id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;, &#x60;match&#x60;
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;player&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvancedStatsApi
     */
    matchesWyIdAdvancedstatsPlayersGet(wyId, fetch, details, authorization, options) {
        return AdvancedStatsApiFp(this.configuration).matchesWyIdAdvancedstatsPlayersGet(wyId, fetch, details, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns advanced statistics of a given player in a specific competition season. Overall, the statistics provided are relative to the selected season, and not to a specific team. By default the season is set to the current one
     * @summary Player Advanced Stats
     * @param {string} compId Competition wyId
     * @param {string} wyId Relevant content id
     * @param {string} [roundId] Relevant round id
     * @param {string} [matchDay] If present, only match data for a single day are returned
     * @param {string} [authorization]
     * @param {string} [seasonId] Relevant season id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;player&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvancedStatsApi
     */
    playersWyIdAdvancedstatsGet(compId, wyId, roundId, matchDay, authorization, seasonId, fetch, details, options) {
        return AdvancedStatsApiFp(this.configuration).playersWyIdAdvancedstatsGet(compId, wyId, roundId, matchDay, authorization, seasonId, fetch, details, options)(this.fetch, this.basePath);
    }
    /**
     * Returns advanced statistics of a given player in a specific match
     * @summary Players match advanced stats
     * @param {string} wyId Relevant content id
     * @param {string} matchWyId Relevant match id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;, &#x60;match&#x60;
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;player&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvancedStatsApi
     */
    playersWyIdMatchesMatchWyIdAdvancedstatsGet(wyId, matchWyId, fetch, details, authorization, options) {
        return AdvancedStatsApiFp(this.configuration).playersWyIdMatchesMatchWyIdAdvancedstatsGet(wyId, matchWyId, fetch, details, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns advanced statistics of a given team in a specific competition season. By default the season is set to the current one.
     * @summary Teams Advanced Stats
     * @param {string} compId Competition wyId
     * @param {string} wyId Relevant content id
     * @param {string} [roundId] Relevant round id
     * @param {string} [matchDay] If present, only match data for a single day are returned
     * @param {string} [authorization]
     * @param {string} [seasonId] Relevant season id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;team&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvancedStatsApi
     */
    teamsWyIdAdvancedstatsGet(compId, wyId, roundId, matchDay, authorization, seasonId, fetch, details, options) {
        return AdvancedStatsApiFp(this.configuration).teamsWyIdAdvancedstatsGet(compId, wyId, roundId, matchDay, authorization, seasonId, fetch, details, options)(this.fetch, this.basePath);
    }
    /**
     * Retrieves information about a given match's statistics
     * @summary Teams match advanced stats
     * @param {string} wyId Relevant content id
     * @param {string} matchWyId Relevant match id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;, &#x60;round&#x60;
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;team&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdvancedStatsApi
     */
    teamsWyIdMatchesMatchWyIdAdvancedstatsGet(wyId, matchWyId, fetch, details, authorization, options) {
        return AdvancedStatsApiFp(this.configuration).teamsWyIdMatchesMatchWyIdAdvancedstatsGet(wyId, matchWyId, fetch, details, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * AreasApi - fetch parameter creator
 * @export
 */
export const AreasApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Returns a list of areas. For area codes we use the ISO 3166-1 standard and the following additional custom areas codes: <table><thead><tr><th>name</th><th>id</th><th>alpha2code</th><th>alpha3code</th></tr></thead><tbody><tr><td>Asia</td><td >1</td><td>AS</td><td>XAS</td></tr><tr><td>Africa</td><td >2</td><td>AF</td><td>XAF</td></tr><tr><td>N/C America</td><td >3</td><td>NC</td><td>XNC</td></tr><tr><td>South America</td><td >4</td><td>SA</td><td>XSA</td></tr><tr><td>Oceania</td><td >5</td><td>OC</td><td>XOC</td></tr><tr><td>Europe</td><td >6</td><td>EU</td><td>XEU</td></tr><tr><td>Chinese Taipei</td><td >49</td><td>CT</td><td>XCT</td></tr><tr><td>England</td><td >67</td><td>EN</td><td>XEN</td></tr><tr><td>Northern Ireland</td><td >144</td><td>NI</td><td>XNI</td></tr><tr><td>Scotland</td><td >164</td><td>SC</td><td>XSC</td></tr><tr><td>Tahiti</td><td >187</td><td>TA</td><td>XTA</td></tr><tr><td>Wales</td><td >208</td><td>WA</td><td>XWA</td></tr><tr><td>Zanzibar</td><td >212</td><td>ZA</td><td>XZA</td></tr><tr><td>Timor-Leste</td><td >213</td><td>LS</td><td>XLS</td></tr><tr><td>Kosovo</td><td >228</td><td>KS</td><td>XKS</td></tr><tr><td>France, metropolitan</td><td >298</td><td>FX</td><td>XFX</td></tr><tr><td>Netherlands antilles</td><td >305</td><td>AN</td><td>XAN</td></tr><tr><td>World</td><td >320</td><td>WO</td><td>XWO</td></tr></tbody></table>
         * @summary Areas
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        areasGet(authorization, options = {}) {
            const localVarPath = `/areas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * AreasApi - functional programming interface
 * @export
 */
export const AreasApiFp = function (configuration) {
    return {
        /**
         * Returns a list of areas. For area codes we use the ISO 3166-1 standard and the following additional custom areas codes: <table><thead><tr><th>name</th><th>id</th><th>alpha2code</th><th>alpha3code</th></tr></thead><tbody><tr><td>Asia</td><td >1</td><td>AS</td><td>XAS</td></tr><tr><td>Africa</td><td >2</td><td>AF</td><td>XAF</td></tr><tr><td>N/C America</td><td >3</td><td>NC</td><td>XNC</td></tr><tr><td>South America</td><td >4</td><td>SA</td><td>XSA</td></tr><tr><td>Oceania</td><td >5</td><td>OC</td><td>XOC</td></tr><tr><td>Europe</td><td >6</td><td>EU</td><td>XEU</td></tr><tr><td>Chinese Taipei</td><td >49</td><td>CT</td><td>XCT</td></tr><tr><td>England</td><td >67</td><td>EN</td><td>XEN</td></tr><tr><td>Northern Ireland</td><td >144</td><td>NI</td><td>XNI</td></tr><tr><td>Scotland</td><td >164</td><td>SC</td><td>XSC</td></tr><tr><td>Tahiti</td><td >187</td><td>TA</td><td>XTA</td></tr><tr><td>Wales</td><td >208</td><td>WA</td><td>XWA</td></tr><tr><td>Zanzibar</td><td >212</td><td>ZA</td><td>XZA</td></tr><tr><td>Timor-Leste</td><td >213</td><td>LS</td><td>XLS</td></tr><tr><td>Kosovo</td><td >228</td><td>KS</td><td>XKS</td></tr><tr><td>France, metropolitan</td><td >298</td><td>FX</td><td>XFX</td></tr><tr><td>Netherlands antilles</td><td >305</td><td>AN</td><td>XAN</td></tr><tr><td>World</td><td >320</td><td>WO</td><td>XWO</td></tr></tbody></table>
         * @summary Areas
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        areasGet(authorization, options) {
            const localVarFetchArgs = AreasApiFetchParamCreator(configuration).areasGet(authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * AreasApi - factory interface
 * @export
 */
export const AreasApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Returns a list of areas. For area codes we use the ISO 3166-1 standard and the following additional custom areas codes: <table><thead><tr><th>name</th><th>id</th><th>alpha2code</th><th>alpha3code</th></tr></thead><tbody><tr><td>Asia</td><td >1</td><td>AS</td><td>XAS</td></tr><tr><td>Africa</td><td >2</td><td>AF</td><td>XAF</td></tr><tr><td>N/C America</td><td >3</td><td>NC</td><td>XNC</td></tr><tr><td>South America</td><td >4</td><td>SA</td><td>XSA</td></tr><tr><td>Oceania</td><td >5</td><td>OC</td><td>XOC</td></tr><tr><td>Europe</td><td >6</td><td>EU</td><td>XEU</td></tr><tr><td>Chinese Taipei</td><td >49</td><td>CT</td><td>XCT</td></tr><tr><td>England</td><td >67</td><td>EN</td><td>XEN</td></tr><tr><td>Northern Ireland</td><td >144</td><td>NI</td><td>XNI</td></tr><tr><td>Scotland</td><td >164</td><td>SC</td><td>XSC</td></tr><tr><td>Tahiti</td><td >187</td><td>TA</td><td>XTA</td></tr><tr><td>Wales</td><td >208</td><td>WA</td><td>XWA</td></tr><tr><td>Zanzibar</td><td >212</td><td>ZA</td><td>XZA</td></tr><tr><td>Timor-Leste</td><td >213</td><td>LS</td><td>XLS</td></tr><tr><td>Kosovo</td><td >228</td><td>KS</td><td>XKS</td></tr><tr><td>France, metropolitan</td><td >298</td><td>FX</td><td>XFX</td></tr><tr><td>Netherlands antilles</td><td >305</td><td>AN</td><td>XAN</td></tr><tr><td>World</td><td >320</td><td>WO</td><td>XWO</td></tr></tbody></table>
         * @summary Areas
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        areasGet(authorization, options) {
            return AreasApiFp(configuration).areasGet(authorization, options)(fetch, basePath);
        },
    };
};
/**
 * AreasApi - object-oriented interface
 * @export
 * @class AreasApi
 * @extends {BaseAPI}
 */
export class AreasApi extends BaseAPI {
    /**
     * Returns a list of areas. For area codes we use the ISO 3166-1 standard and the following additional custom areas codes: <table><thead><tr><th>name</th><th>id</th><th>alpha2code</th><th>alpha3code</th></tr></thead><tbody><tr><td>Asia</td><td >1</td><td>AS</td><td>XAS</td></tr><tr><td>Africa</td><td >2</td><td>AF</td><td>XAF</td></tr><tr><td>N/C America</td><td >3</td><td>NC</td><td>XNC</td></tr><tr><td>South America</td><td >4</td><td>SA</td><td>XSA</td></tr><tr><td>Oceania</td><td >5</td><td>OC</td><td>XOC</td></tr><tr><td>Europe</td><td >6</td><td>EU</td><td>XEU</td></tr><tr><td>Chinese Taipei</td><td >49</td><td>CT</td><td>XCT</td></tr><tr><td>England</td><td >67</td><td>EN</td><td>XEN</td></tr><tr><td>Northern Ireland</td><td >144</td><td>NI</td><td>XNI</td></tr><tr><td>Scotland</td><td >164</td><td>SC</td><td>XSC</td></tr><tr><td>Tahiti</td><td >187</td><td>TA</td><td>XTA</td></tr><tr><td>Wales</td><td >208</td><td>WA</td><td>XWA</td></tr><tr><td>Zanzibar</td><td >212</td><td>ZA</td><td>XZA</td></tr><tr><td>Timor-Leste</td><td >213</td><td>LS</td><td>XLS</td></tr><tr><td>Kosovo</td><td >228</td><td>KS</td><td>XKS</td></tr><tr><td>France, metropolitan</td><td >298</td><td>FX</td><td>XFX</td></tr><tr><td>Netherlands antilles</td><td >305</td><td>AN</td><td>XAN</td></tr><tr><td>World</td><td >320</td><td>WO</td><td>XWO</td></tr></tbody></table>
     * @summary Areas
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AreasApi
     */
    areasGet(authorization, options) {
        return AreasApiFp(this.configuration).areasGet(authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * CoachesApi - fetch parameter creator
 * @export
 */
export const CoachesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Returns info about the given coach
         * @summary Coach
         * @param {string} wyId Relevant content id
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;currentTeam&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coachesWyIdGet(wyId, details, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling coachesWyIdGet.');
            }
            const localVarPath = `/coaches/{wyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CoachesApi - functional programming interface
 * @export
 */
export const CoachesApiFp = function (configuration) {
    return {
        /**
         * Returns info about the given coach
         * @summary Coach
         * @param {string} wyId Relevant content id
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;currentTeam&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coachesWyIdGet(wyId, details, authorization, options) {
            const localVarFetchArgs = CoachesApiFetchParamCreator(configuration).coachesWyIdGet(wyId, details, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * CoachesApi - factory interface
 * @export
 */
export const CoachesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Returns info about the given coach
         * @summary Coach
         * @param {string} wyId Relevant content id
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;currentTeam&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coachesWyIdGet(wyId, details, authorization, options) {
            return CoachesApiFp(configuration).coachesWyIdGet(wyId, details, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * CoachesApi - object-oriented interface
 * @export
 * @class CoachesApi
 * @extends {BaseAPI}
 */
export class CoachesApi extends BaseAPI {
    /**
     * Returns info about the given coach
     * @summary Coach
     * @param {string} wyId Relevant content id
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;currentTeam&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoachesApi
     */
    coachesWyIdGet(wyId, details, authorization, options) {
        return CoachesApiFp(this.configuration).coachesWyIdGet(wyId, details, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * CompetitionsApi - fetch parameter creator
 * @export
 */
export const CompetitionsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Returns a list of competitions for a given area
         * @summary Competitions list
         * @param {string} areaId Area three-letters code
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsGet(areaId, authorization, options = {}) {
            // verify required parameter 'areaId' is not null or undefined
            if (areaId === null || areaId === undefined) {
                throw new RequiredError('areaId', 'Required parameter areaId was null or undefined when calling competitionsGet.');
            }
            const localVarPath = `/competitions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (areaId !== undefined) {
                localVarQueryParameter['areaId'] = areaId;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns info about the given competition
         * @summary Competition detail
         * @param {string} wyId Relevant content id
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdGet(wyId, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling competitionsWyIdGet.');
            }
            const localVarPath = `/competitions/{wyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of matches of the given competition
         * @summary Matches list
         * @param {string} wyId Competition wyId
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdMatchesGet(wyId, fetch, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling competitionsWyIdMatchesGet.');
            }
            const localVarPath = `/competitions/{wyId}/matches`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of players of the given competition
         * @summary Players list
         * @param {string} wyId Competition wyId
         * @param {string} [count] Alias for limit argument
         * @param {string} [limit] Allows to change the number of results for page (limited to max 100 results for single page)
         * @param {string} [sort] Allows to sort resultset by given field and directions
         * @param {string} [authorization]
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;
         * @param {string} [page] Allows to change page (current page) from which the results are fetched
         * @param {string} [search] Allows to simple search and filter resultset by OR condition among defined search fields
         * @param {string} [details]
         * @param {string} [filter] Allows to simple filter resultset by AND and EQUAL condition on given field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdPlayersGet(wyId, count, limit, sort, authorization, fetch, page, search, details, filter, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling competitionsWyIdPlayersGet.');
            }
            const localVarPath = `/competitions/{wyId}/players`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of seasons of the given competition
         * @summary Seasons list
         * @param {string} wyId Competition wyId
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;
         * @param {string} [active] Flag to retrieve only active objects
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdSeasonsGet(wyId, fetch, active, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling competitionsWyIdSeasonsGet.');
            }
            const localVarPath = `/competitions/{wyId}/seasons`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of teams of the given competition
         * @summary Teams list
         * @param {string} wyId Competition wyId
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdTeamsGet(wyId, fetch, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling competitionsWyIdTeamsGet.');
            }
            const localVarPath = `/competitions/{wyId}/teams`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * CompetitionsApi - functional programming interface
 * @export
 */
export const CompetitionsApiFp = function (configuration) {
    return {
        /**
         * Returns a list of competitions for a given area
         * @summary Competitions list
         * @param {string} areaId Area three-letters code
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsGet(areaId, authorization, options) {
            const localVarFetchArgs = CompetitionsApiFetchParamCreator(configuration).competitionsGet(areaId, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns info about the given competition
         * @summary Competition detail
         * @param {string} wyId Relevant content id
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdGet(wyId, authorization, options) {
            const localVarFetchArgs = CompetitionsApiFetchParamCreator(configuration).competitionsWyIdGet(wyId, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the list of matches of the given competition
         * @summary Matches list
         * @param {string} wyId Competition wyId
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdMatchesGet(wyId, fetch, authorization, options) {
            const localVarFetchArgs = CompetitionsApiFetchParamCreator(configuration).competitionsWyIdMatchesGet(wyId, fetch, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the list of players of the given competition
         * @summary Players list
         * @param {string} wyId Competition wyId
         * @param {string} [count] Alias for limit argument
         * @param {string} [limit] Allows to change the number of results for page (limited to max 100 results for single page)
         * @param {string} [sort] Allows to sort resultset by given field and directions
         * @param {string} [authorization]
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;
         * @param {string} [page] Allows to change page (current page) from which the results are fetched
         * @param {string} [search] Allows to simple search and filter resultset by OR condition among defined search fields
         * @param {string} [details]
         * @param {string} [filter] Allows to simple filter resultset by AND and EQUAL condition on given field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdPlayersGet(wyId, count, limit, sort, authorization, fetch, page, search, details, filter, options) {
            const localVarFetchArgs = CompetitionsApiFetchParamCreator(configuration).competitionsWyIdPlayersGet(wyId, count, limit, sort, authorization, fetch, page, search, details, filter, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the list of seasons of the given competition
         * @summary Seasons list
         * @param {string} wyId Competition wyId
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;
         * @param {string} [active] Flag to retrieve only active objects
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdSeasonsGet(wyId, fetch, active, authorization, options) {
            const localVarFetchArgs = CompetitionsApiFetchParamCreator(configuration).competitionsWyIdSeasonsGet(wyId, fetch, active, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the list of teams of the given competition
         * @summary Teams list
         * @param {string} wyId Competition wyId
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdTeamsGet(wyId, fetch, authorization, options) {
            const localVarFetchArgs = CompetitionsApiFetchParamCreator(configuration).competitionsWyIdTeamsGet(wyId, fetch, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * CompetitionsApi - factory interface
 * @export
 */
export const CompetitionsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Returns a list of competitions for a given area
         * @summary Competitions list
         * @param {string} areaId Area three-letters code
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsGet(areaId, authorization, options) {
            return CompetitionsApiFp(configuration).competitionsGet(areaId, authorization, options)(fetch, basePath);
        },
        /**
         * Returns info about the given competition
         * @summary Competition detail
         * @param {string} wyId Relevant content id
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdGet(wyId, authorization, options) {
            return CompetitionsApiFp(configuration).competitionsWyIdGet(wyId, authorization, options)(fetch, basePath);
        },
        /**
         * Returns the list of matches of the given competition
         * @summary Matches list
         * @param {string} wyId Competition wyId
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdMatchesGet(wyId, fetch, authorization, options) {
            return CompetitionsApiFp(configuration).competitionsWyIdMatchesGet(wyId, fetch, authorization, options)(fetch, basePath);
        },
        /**
         * Returns the list of players of the given competition
         * @summary Players list
         * @param {string} wyId Competition wyId
         * @param {string} [count] Alias for limit argument
         * @param {string} [limit] Allows to change the number of results for page (limited to max 100 results for single page)
         * @param {string} [sort] Allows to sort resultset by given field and directions
         * @param {string} [authorization]
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;
         * @param {string} [page] Allows to change page (current page) from which the results are fetched
         * @param {string} [search] Allows to simple search and filter resultset by OR condition among defined search fields
         * @param {string} [details]
         * @param {string} [filter] Allows to simple filter resultset by AND and EQUAL condition on given field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdPlayersGet(wyId, count, limit, sort, authorization, fetch, page, search, details, filter, options) {
            return CompetitionsApiFp(configuration).competitionsWyIdPlayersGet(wyId, count, limit, sort, authorization, fetch, page, search, details, filter, options)(fetch, basePath);
        },
        /**
         * Returns the list of seasons of the given competition
         * @summary Seasons list
         * @param {string} wyId Competition wyId
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;
         * @param {string} [active] Flag to retrieve only active objects
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdSeasonsGet(wyId, fetch, active, authorization, options) {
            return CompetitionsApiFp(configuration).competitionsWyIdSeasonsGet(wyId, fetch, active, authorization, options)(fetch, basePath);
        },
        /**
         * Returns the list of teams of the given competition
         * @summary Teams list
         * @param {string} wyId Competition wyId
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdTeamsGet(wyId, fetch, authorization, options) {
            return CompetitionsApiFp(configuration).competitionsWyIdTeamsGet(wyId, fetch, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * CompetitionsApi - object-oriented interface
 * @export
 * @class CompetitionsApi
 * @extends {BaseAPI}
 */
export class CompetitionsApi extends BaseAPI {
    /**
     * Returns a list of competitions for a given area
     * @summary Competitions list
     * @param {string} areaId Area three-letters code
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    competitionsGet(areaId, authorization, options) {
        return CompetitionsApiFp(this.configuration).competitionsGet(areaId, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns info about the given competition
     * @summary Competition detail
     * @param {string} wyId Relevant content id
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    competitionsWyIdGet(wyId, authorization, options) {
        return CompetitionsApiFp(this.configuration).competitionsWyIdGet(wyId, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns the list of matches of the given competition
     * @summary Matches list
     * @param {string} wyId Competition wyId
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    competitionsWyIdMatchesGet(wyId, fetch, authorization, options) {
        return CompetitionsApiFp(this.configuration).competitionsWyIdMatchesGet(wyId, fetch, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns the list of players of the given competition
     * @summary Players list
     * @param {string} wyId Competition wyId
     * @param {string} [count] Alias for limit argument
     * @param {string} [limit] Allows to change the number of results for page (limited to max 100 results for single page)
     * @param {string} [sort] Allows to sort resultset by given field and directions
     * @param {string} [authorization]
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;
     * @param {string} [page] Allows to change page (current page) from which the results are fetched
     * @param {string} [search] Allows to simple search and filter resultset by OR condition among defined search fields
     * @param {string} [details]
     * @param {string} [filter] Allows to simple filter resultset by AND and EQUAL condition on given field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    competitionsWyIdPlayersGet(wyId, count, limit, sort, authorization, fetch, page, search, details, filter, options) {
        return CompetitionsApiFp(this.configuration).competitionsWyIdPlayersGet(wyId, count, limit, sort, authorization, fetch, page, search, details, filter, options)(this.fetch, this.basePath);
    }
    /**
     * Returns the list of seasons of the given competition
     * @summary Seasons list
     * @param {string} wyId Competition wyId
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;
     * @param {string} [active] Flag to retrieve only active objects
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    competitionsWyIdSeasonsGet(wyId, fetch, active, authorization, options) {
        return CompetitionsApiFp(this.configuration).competitionsWyIdSeasonsGet(wyId, fetch, active, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns the list of teams of the given competition
     * @summary Teams list
     * @param {string} wyId Competition wyId
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompetitionsApi
     */
    competitionsWyIdTeamsGet(wyId, fetch, authorization, options) {
        return CompetitionsApiFp(this.configuration).competitionsWyIdTeamsGet(wyId, fetch, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Returns a list of areas
         * @summary Areas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        areasOptions(options = {}) {
            const localVarPath = `/areas`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coachesWyIdOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling coachesWyIdOptions.');
            }
            const localVarPath = `/coaches/{wyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsOptions(options = {}) {
            const localVarPath = `/competitions`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdMatchesOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling competitionsWyIdMatchesOptions.');
            }
            const localVarPath = `/competitions/{wyId}/matches`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling competitionsWyIdOptions.');
            }
            const localVarPath = `/competitions/{wyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdPlayersOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling competitionsWyIdPlayersOptions.');
            }
            const localVarPath = `/competitions/{wyId}/players`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdSeasonsOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling competitionsWyIdSeasonsOptions.');
            }
            const localVarPath = `/competitions/{wyId}/seasons`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdTeamsOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling competitionsWyIdTeamsOptions.');
            }
            const localVarPath = `/competitions/{wyId}/teams`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdAdvancedstatsOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling matchesWyIdAdvancedstatsOptions.');
            }
            const localVarPath = `/matches/{wyId}/advancedstats`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdAdvancedstatsPlayersOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling matchesWyIdAdvancedstatsPlayersOptions.');
            }
            const localVarPath = `/matches/{wyId}/advancedstats/players`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdEventsOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling matchesWyIdEventsOptions.');
            }
            const localVarPath = `/matches/{wyId}/events`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdFormationsOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling matchesWyIdFormationsOptions.');
            }
            const localVarPath = `/matches/{wyId}/formations`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling matchesWyIdOptions.');
            }
            const localVarPath = `/matches/{wyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdAdvancedstatsOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdAdvancedstatsOptions.');
            }
            const localVarPath = `/players/{wyId}/advancedstats`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdCareerOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdCareerOptions.');
            }
            const localVarPath = `/players/{wyId}/career`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdContractinfoOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdContractinfoOptions.');
            }
            const localVarPath = `/players/{wyId}/contractinfo`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdFixturesOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdFixturesOptions.');
            }
            const localVarPath = `/players/{wyId}/fixtures`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {string} matchWyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdMatchesMatchWyIdAdvancedstatsOptions(wyId, matchWyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdMatchesMatchWyIdAdvancedstatsOptions.');
            }
            // verify required parameter 'matchWyId' is not null or undefined
            if (matchWyId === null || matchWyId === undefined) {
                throw new RequiredError('matchWyId', 'Required parameter matchWyId was null or undefined when calling playersWyIdMatchesMatchWyIdAdvancedstatsOptions.');
            }
            const localVarPath = `/players/{wyId}/matches/{matchWyId}/advancedstats`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)))
                .replace(`{${"matchWyId"}}`, encodeURIComponent(String(matchWyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {string} matchWyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdMatchesMatchWyIdOptions(wyId, matchWyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdMatchesMatchWyIdOptions.');
            }
            // verify required parameter 'matchWyId' is not null or undefined
            if (matchWyId === null || matchWyId === undefined) {
                throw new RequiredError('matchWyId', 'Required parameter matchWyId was null or undefined when calling playersWyIdMatchesMatchWyIdOptions.');
            }
            const localVarPath = `/players/{wyId}/matches/{matchWyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)))
                .replace(`{${"matchWyId"}}`, encodeURIComponent(String(matchWyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdMatchesOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdMatchesOptions.');
            }
            const localVarPath = `/players/{wyId}/matches`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdOptions.');
            }
            const localVarPath = `/players/{wyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdTransfersOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdTransfersOptions.');
            }
            const localVarPath = `/players/{wyId}/transfers`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refereesWyIdOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling refereesWyIdOptions.');
            }
            const localVarPath = `/referees/{wyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundsWyIdOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling roundsWyIdOptions.');
            }
            const localVarPath = `/rounds/{wyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOptions(options = {}) {
            const localVarPath = `/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdAssistmenOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdAssistmenOptions.');
            }
            const localVarPath = `/seasons/{wyId}/assistmen`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdCareerOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdCareerOptions.');
            }
            const localVarPath = `/seasons/{wyId}/career`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdFixturesOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdFixturesOptions.');
            }
            const localVarPath = `/seasons/{wyId}/fixtures`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdMatchesOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdMatchesOptions.');
            }
            const localVarPath = `/seasons/{wyId}/matches`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdOptions.');
            }
            const localVarPath = `/seasons/{wyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdPlayersOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdPlayersOptions.');
            }
            const localVarPath = `/seasons/{wyId}/players`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdScorersOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdScorersOptions.');
            }
            const localVarPath = `/seasons/{wyId}/scorers`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdStandingsOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdStandingsOptions.');
            }
            const localVarPath = `/seasons/{wyId}/standings`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdTeamsOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdTeamsOptions.');
            }
            const localVarPath = `/seasons/{wyId}/teams`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdTransfersOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdTransfersOptions.');
            }
            const localVarPath = `/seasons/{wyId}/transfers`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdAdvancedstatsOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdAdvancedstatsOptions.');
            }
            const localVarPath = `/teams/{wyId}/advancedstats`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdCareerOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdCareerOptions.');
            }
            const localVarPath = `/teams/{wyId}/career`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdFixturesOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdFixturesOptions.');
            }
            const localVarPath = `/teams/{wyId}/fixtures`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {string} matchWyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdMatchesMatchWyIdAdvancedstatsOptions(wyId, matchWyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdMatchesMatchWyIdAdvancedstatsOptions.');
            }
            // verify required parameter 'matchWyId' is not null or undefined
            if (matchWyId === null || matchWyId === undefined) {
                throw new RequiredError('matchWyId', 'Required parameter matchWyId was null or undefined when calling teamsWyIdMatchesMatchWyIdAdvancedstatsOptions.');
            }
            const localVarPath = `/teams/{wyId}/matches/{matchWyId}/advancedstats`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)))
                .replace(`{${"matchWyId"}}`, encodeURIComponent(String(matchWyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {string} matchWyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdMatchesMatchWyIdOptions(wyId, matchWyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdMatchesMatchWyIdOptions.');
            }
            // verify required parameter 'matchWyId' is not null or undefined
            if (matchWyId === null || matchWyId === undefined) {
                throw new RequiredError('matchWyId', 'Required parameter matchWyId was null or undefined when calling teamsWyIdMatchesMatchWyIdOptions.');
            }
            const localVarPath = `/teams/{wyId}/matches/{matchWyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)))
                .replace(`{${"matchWyId"}}`, encodeURIComponent(String(matchWyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdMatchesOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdMatchesOptions.');
            }
            const localVarPath = `/teams/{wyId}/matches`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdOptions.');
            }
            const localVarPath = `/teams/{wyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdSquadOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdSquadOptions.');
            }
            const localVarPath = `/teams/{wyId}/squad`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdTransfersOptions(wyId, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdTransfersOptions.');
            }
            const localVarPath = `/teams/{wyId}/transfers`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatedobjectsOptions(options = {}) {
            const localVarPath = `/updatedobjects`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdOffsetsOptions(matchId, options = {}) {
            // verify required parameter 'matchId' is not null or undefined
            if (matchId === null || matchId === undefined) {
                throw new RequiredError('matchId', 'Required parameter matchId was null or undefined when calling videosMatchIdOffsetsOptions.');
            }
            const localVarPath = `/videos/{matchId}/offsets`
                .replace(`{${"matchId"}}`, encodeURIComponent(String(matchId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdOptions(matchId, options = {}) {
            // verify required parameter 'matchId' is not null or undefined
            if (matchId === null || matchId === undefined) {
                throw new RequiredError('matchId', 'Required parameter matchId was null or undefined when calling videosMatchIdOptions.');
            }
            const localVarPath = `/videos/{matchId}`
                .replace(`{${"matchId"}}`, encodeURIComponent(String(matchId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdQualitiesOptions(matchId, options = {}) {
            // verify required parameter 'matchId' is not null or undefined
            if (matchId === null || matchId === undefined) {
                throw new RequiredError('matchId', 'Required parameter matchId was null or undefined when calling videosMatchIdQualitiesOptions.');
            }
            const localVarPath = `/videos/{matchId}/qualities`
                .replace(`{${"matchId"}}`, encodeURIComponent(String(matchId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'OPTIONS' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration) {
    return {
        /**
         * Returns a list of areas
         * @summary Areas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        areasOptions(options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).areasOptions(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coachesWyIdOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).coachesWyIdOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsOptions(options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).competitionsOptions(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdMatchesOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).competitionsWyIdMatchesOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).competitionsWyIdOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdPlayersOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).competitionsWyIdPlayersOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdSeasonsOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).competitionsWyIdSeasonsOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdTeamsOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).competitionsWyIdTeamsOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdAdvancedstatsOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).matchesWyIdAdvancedstatsOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdAdvancedstatsPlayersOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).matchesWyIdAdvancedstatsPlayersOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdEventsOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).matchesWyIdEventsOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdFormationsOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).matchesWyIdFormationsOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).matchesWyIdOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdAdvancedstatsOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).playersWyIdAdvancedstatsOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdCareerOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).playersWyIdCareerOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdContractinfoOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).playersWyIdContractinfoOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdFixturesOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).playersWyIdFixturesOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {string} matchWyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdMatchesMatchWyIdAdvancedstatsOptions(wyId, matchWyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).playersWyIdMatchesMatchWyIdAdvancedstatsOptions(wyId, matchWyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {string} matchWyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdMatchesMatchWyIdOptions(wyId, matchWyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).playersWyIdMatchesMatchWyIdOptions(wyId, matchWyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdMatchesOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).playersWyIdMatchesOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).playersWyIdOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdTransfersOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).playersWyIdTransfersOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refereesWyIdOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).refereesWyIdOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundsWyIdOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).roundsWyIdOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOptions(options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).searchOptions(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdAssistmenOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).seasonsWyIdAssistmenOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdCareerOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).seasonsWyIdCareerOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdFixturesOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).seasonsWyIdFixturesOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdMatchesOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).seasonsWyIdMatchesOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).seasonsWyIdOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdPlayersOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).seasonsWyIdPlayersOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdScorersOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).seasonsWyIdScorersOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdStandingsOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).seasonsWyIdStandingsOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdTeamsOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).seasonsWyIdTeamsOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdTransfersOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).seasonsWyIdTransfersOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdAdvancedstatsOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).teamsWyIdAdvancedstatsOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdCareerOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).teamsWyIdCareerOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdFixturesOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).teamsWyIdFixturesOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {string} matchWyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdMatchesMatchWyIdAdvancedstatsOptions(wyId, matchWyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).teamsWyIdMatchesMatchWyIdAdvancedstatsOptions(wyId, matchWyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {string} matchWyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdMatchesMatchWyIdOptions(wyId, matchWyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).teamsWyIdMatchesMatchWyIdOptions(wyId, matchWyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdMatchesOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).teamsWyIdMatchesOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).teamsWyIdOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdSquadOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).teamsWyIdSquadOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdTransfersOptions(wyId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).teamsWyIdTransfersOptions(wyId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatedobjectsOptions(options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).updatedobjectsOptions(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdOffsetsOptions(matchId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).videosMatchIdOffsetsOptions(matchId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdOptions(matchId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).videosMatchIdOptions(matchId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         *
         * @param {string} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdQualitiesOptions(matchId, options) {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).videosMatchIdQualitiesOptions(matchId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Returns a list of areas
         * @summary Areas
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        areasOptions(options) {
            return DefaultApiFp(configuration).areasOptions(options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        coachesWyIdOptions(wyId, options) {
            return DefaultApiFp(configuration).coachesWyIdOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsOptions(options) {
            return DefaultApiFp(configuration).competitionsOptions(options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdMatchesOptions(wyId, options) {
            return DefaultApiFp(configuration).competitionsWyIdMatchesOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdOptions(wyId, options) {
            return DefaultApiFp(configuration).competitionsWyIdOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdPlayersOptions(wyId, options) {
            return DefaultApiFp(configuration).competitionsWyIdPlayersOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdSeasonsOptions(wyId, options) {
            return DefaultApiFp(configuration).competitionsWyIdSeasonsOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        competitionsWyIdTeamsOptions(wyId, options) {
            return DefaultApiFp(configuration).competitionsWyIdTeamsOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdAdvancedstatsOptions(wyId, options) {
            return DefaultApiFp(configuration).matchesWyIdAdvancedstatsOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdAdvancedstatsPlayersOptions(wyId, options) {
            return DefaultApiFp(configuration).matchesWyIdAdvancedstatsPlayersOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdEventsOptions(wyId, options) {
            return DefaultApiFp(configuration).matchesWyIdEventsOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdFormationsOptions(wyId, options) {
            return DefaultApiFp(configuration).matchesWyIdFormationsOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdOptions(wyId, options) {
            return DefaultApiFp(configuration).matchesWyIdOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdAdvancedstatsOptions(wyId, options) {
            return DefaultApiFp(configuration).playersWyIdAdvancedstatsOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdCareerOptions(wyId, options) {
            return DefaultApiFp(configuration).playersWyIdCareerOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdContractinfoOptions(wyId, options) {
            return DefaultApiFp(configuration).playersWyIdContractinfoOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdFixturesOptions(wyId, options) {
            return DefaultApiFp(configuration).playersWyIdFixturesOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {string} matchWyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdMatchesMatchWyIdAdvancedstatsOptions(wyId, matchWyId, options) {
            return DefaultApiFp(configuration).playersWyIdMatchesMatchWyIdAdvancedstatsOptions(wyId, matchWyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {string} matchWyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdMatchesMatchWyIdOptions(wyId, matchWyId, options) {
            return DefaultApiFp(configuration).playersWyIdMatchesMatchWyIdOptions(wyId, matchWyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdMatchesOptions(wyId, options) {
            return DefaultApiFp(configuration).playersWyIdMatchesOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdOptions(wyId, options) {
            return DefaultApiFp(configuration).playersWyIdOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdTransfersOptions(wyId, options) {
            return DefaultApiFp(configuration).playersWyIdTransfersOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refereesWyIdOptions(wyId, options) {
            return DefaultApiFp(configuration).refereesWyIdOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundsWyIdOptions(wyId, options) {
            return DefaultApiFp(configuration).roundsWyIdOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchOptions(options) {
            return DefaultApiFp(configuration).searchOptions(options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdAssistmenOptions(wyId, options) {
            return DefaultApiFp(configuration).seasonsWyIdAssistmenOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdCareerOptions(wyId, options) {
            return DefaultApiFp(configuration).seasonsWyIdCareerOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdFixturesOptions(wyId, options) {
            return DefaultApiFp(configuration).seasonsWyIdFixturesOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdMatchesOptions(wyId, options) {
            return DefaultApiFp(configuration).seasonsWyIdMatchesOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdOptions(wyId, options) {
            return DefaultApiFp(configuration).seasonsWyIdOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdPlayersOptions(wyId, options) {
            return DefaultApiFp(configuration).seasonsWyIdPlayersOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdScorersOptions(wyId, options) {
            return DefaultApiFp(configuration).seasonsWyIdScorersOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdStandingsOptions(wyId, options) {
            return DefaultApiFp(configuration).seasonsWyIdStandingsOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdTeamsOptions(wyId, options) {
            return DefaultApiFp(configuration).seasonsWyIdTeamsOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdTransfersOptions(wyId, options) {
            return DefaultApiFp(configuration).seasonsWyIdTransfersOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdAdvancedstatsOptions(wyId, options) {
            return DefaultApiFp(configuration).teamsWyIdAdvancedstatsOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdCareerOptions(wyId, options) {
            return DefaultApiFp(configuration).teamsWyIdCareerOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdFixturesOptions(wyId, options) {
            return DefaultApiFp(configuration).teamsWyIdFixturesOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {string} matchWyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdMatchesMatchWyIdAdvancedstatsOptions(wyId, matchWyId, options) {
            return DefaultApiFp(configuration).teamsWyIdMatchesMatchWyIdAdvancedstatsOptions(wyId, matchWyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {string} matchWyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdMatchesMatchWyIdOptions(wyId, matchWyId, options) {
            return DefaultApiFp(configuration).teamsWyIdMatchesMatchWyIdOptions(wyId, matchWyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdMatchesOptions(wyId, options) {
            return DefaultApiFp(configuration).teamsWyIdMatchesOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdOptions(wyId, options) {
            return DefaultApiFp(configuration).teamsWyIdOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdSquadOptions(wyId, options) {
            return DefaultApiFp(configuration).teamsWyIdSquadOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} wyId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdTransfersOptions(wyId, options) {
            return DefaultApiFp(configuration).teamsWyIdTransfersOptions(wyId, options)(fetch, basePath);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatedobjectsOptions(options) {
            return DefaultApiFp(configuration).updatedobjectsOptions(options)(fetch, basePath);
        },
        /**
         *
         * @param {string} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdOffsetsOptions(matchId, options) {
            return DefaultApiFp(configuration).videosMatchIdOffsetsOptions(matchId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdOptions(matchId, options) {
            return DefaultApiFp(configuration).videosMatchIdOptions(matchId, options)(fetch, basePath);
        },
        /**
         *
         * @param {string} matchId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdQualitiesOptions(matchId, options) {
            return DefaultApiFp(configuration).videosMatchIdQualitiesOptions(matchId, options)(fetch, basePath);
        },
    };
};
/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Returns a list of areas
     * @summary Areas
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    areasOptions(options) {
        return DefaultApiFp(this.configuration).areasOptions(options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    coachesWyIdOptions(wyId, options) {
        return DefaultApiFp(this.configuration).coachesWyIdOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    competitionsOptions(options) {
        return DefaultApiFp(this.configuration).competitionsOptions(options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    competitionsWyIdMatchesOptions(wyId, options) {
        return DefaultApiFp(this.configuration).competitionsWyIdMatchesOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    competitionsWyIdOptions(wyId, options) {
        return DefaultApiFp(this.configuration).competitionsWyIdOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    competitionsWyIdPlayersOptions(wyId, options) {
        return DefaultApiFp(this.configuration).competitionsWyIdPlayersOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    competitionsWyIdSeasonsOptions(wyId, options) {
        return DefaultApiFp(this.configuration).competitionsWyIdSeasonsOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    competitionsWyIdTeamsOptions(wyId, options) {
        return DefaultApiFp(this.configuration).competitionsWyIdTeamsOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    matchesWyIdAdvancedstatsOptions(wyId, options) {
        return DefaultApiFp(this.configuration).matchesWyIdAdvancedstatsOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    matchesWyIdAdvancedstatsPlayersOptions(wyId, options) {
        return DefaultApiFp(this.configuration).matchesWyIdAdvancedstatsPlayersOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    matchesWyIdEventsOptions(wyId, options) {
        return DefaultApiFp(this.configuration).matchesWyIdEventsOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    matchesWyIdFormationsOptions(wyId, options) {
        return DefaultApiFp(this.configuration).matchesWyIdFormationsOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    matchesWyIdOptions(wyId, options) {
        return DefaultApiFp(this.configuration).matchesWyIdOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    playersWyIdAdvancedstatsOptions(wyId, options) {
        return DefaultApiFp(this.configuration).playersWyIdAdvancedstatsOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    playersWyIdCareerOptions(wyId, options) {
        return DefaultApiFp(this.configuration).playersWyIdCareerOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    playersWyIdContractinfoOptions(wyId, options) {
        return DefaultApiFp(this.configuration).playersWyIdContractinfoOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    playersWyIdFixturesOptions(wyId, options) {
        return DefaultApiFp(this.configuration).playersWyIdFixturesOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {string} matchWyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    playersWyIdMatchesMatchWyIdAdvancedstatsOptions(wyId, matchWyId, options) {
        return DefaultApiFp(this.configuration).playersWyIdMatchesMatchWyIdAdvancedstatsOptions(wyId, matchWyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {string} matchWyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    playersWyIdMatchesMatchWyIdOptions(wyId, matchWyId, options) {
        return DefaultApiFp(this.configuration).playersWyIdMatchesMatchWyIdOptions(wyId, matchWyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    playersWyIdMatchesOptions(wyId, options) {
        return DefaultApiFp(this.configuration).playersWyIdMatchesOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    playersWyIdOptions(wyId, options) {
        return DefaultApiFp(this.configuration).playersWyIdOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    playersWyIdTransfersOptions(wyId, options) {
        return DefaultApiFp(this.configuration).playersWyIdTransfersOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    refereesWyIdOptions(wyId, options) {
        return DefaultApiFp(this.configuration).refereesWyIdOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    roundsWyIdOptions(wyId, options) {
        return DefaultApiFp(this.configuration).roundsWyIdOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    searchOptions(options) {
        return DefaultApiFp(this.configuration).searchOptions(options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    seasonsWyIdAssistmenOptions(wyId, options) {
        return DefaultApiFp(this.configuration).seasonsWyIdAssistmenOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    seasonsWyIdCareerOptions(wyId, options) {
        return DefaultApiFp(this.configuration).seasonsWyIdCareerOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    seasonsWyIdFixturesOptions(wyId, options) {
        return DefaultApiFp(this.configuration).seasonsWyIdFixturesOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    seasonsWyIdMatchesOptions(wyId, options) {
        return DefaultApiFp(this.configuration).seasonsWyIdMatchesOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    seasonsWyIdOptions(wyId, options) {
        return DefaultApiFp(this.configuration).seasonsWyIdOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    seasonsWyIdPlayersOptions(wyId, options) {
        return DefaultApiFp(this.configuration).seasonsWyIdPlayersOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    seasonsWyIdScorersOptions(wyId, options) {
        return DefaultApiFp(this.configuration).seasonsWyIdScorersOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    seasonsWyIdStandingsOptions(wyId, options) {
        return DefaultApiFp(this.configuration).seasonsWyIdStandingsOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    seasonsWyIdTeamsOptions(wyId, options) {
        return DefaultApiFp(this.configuration).seasonsWyIdTeamsOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    seasonsWyIdTransfersOptions(wyId, options) {
        return DefaultApiFp(this.configuration).seasonsWyIdTransfersOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    teamsWyIdAdvancedstatsOptions(wyId, options) {
        return DefaultApiFp(this.configuration).teamsWyIdAdvancedstatsOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    teamsWyIdCareerOptions(wyId, options) {
        return DefaultApiFp(this.configuration).teamsWyIdCareerOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    teamsWyIdFixturesOptions(wyId, options) {
        return DefaultApiFp(this.configuration).teamsWyIdFixturesOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {string} matchWyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    teamsWyIdMatchesMatchWyIdAdvancedstatsOptions(wyId, matchWyId, options) {
        return DefaultApiFp(this.configuration).teamsWyIdMatchesMatchWyIdAdvancedstatsOptions(wyId, matchWyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {string} matchWyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    teamsWyIdMatchesMatchWyIdOptions(wyId, matchWyId, options) {
        return DefaultApiFp(this.configuration).teamsWyIdMatchesMatchWyIdOptions(wyId, matchWyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    teamsWyIdMatchesOptions(wyId, options) {
        return DefaultApiFp(this.configuration).teamsWyIdMatchesOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    teamsWyIdOptions(wyId, options) {
        return DefaultApiFp(this.configuration).teamsWyIdOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    teamsWyIdSquadOptions(wyId, options) {
        return DefaultApiFp(this.configuration).teamsWyIdSquadOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} wyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    teamsWyIdTransfersOptions(wyId, options) {
        return DefaultApiFp(this.configuration).teamsWyIdTransfersOptions(wyId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    updatedobjectsOptions(options) {
        return DefaultApiFp(this.configuration).updatedobjectsOptions(options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} matchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    videosMatchIdOffsetsOptions(matchId, options) {
        return DefaultApiFp(this.configuration).videosMatchIdOffsetsOptions(matchId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} matchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    videosMatchIdOptions(matchId, options) {
        return DefaultApiFp(this.configuration).videosMatchIdOptions(matchId, options)(this.fetch, this.basePath);
    }
    /**
     *
     * @param {string} matchId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    videosMatchIdQualitiesOptions(matchId, options) {
        return DefaultApiFp(this.configuration).videosMatchIdQualitiesOptions(matchId, options)(this.fetch, this.basePath);
    }
}
/**
 * EventsApi - fetch parameter creator
 * @export
 */
export const EventsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Retrieves information about a given match's events
         * @summary MatchEvents
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;teams&#x60;, &#x60;players&#x60;, &#x60;match&#x60;, &#x60;coaches&#x60;, &#x60;referees&#x60;, &#x60;formations&#x60;, &#x60;substitutions&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;tag&#x60;
         * @param {string} [exclude] List of objects to exclude from API output, separated by comma: &#x60;possessions&#x60;, &#x60;names&#x60;, &#x60;positions&#x60;, &#x60;formations&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdEventsGet(wyId, fetch, details, exclude, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling matchesWyIdEventsGet.');
            }
            const localVarPath = `/matches/{wyId}/events`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (exclude !== undefined) {
                localVarQueryParameter['exclude'] = exclude;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function (configuration) {
    return {
        /**
         * Retrieves information about a given match's events
         * @summary MatchEvents
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;teams&#x60;, &#x60;players&#x60;, &#x60;match&#x60;, &#x60;coaches&#x60;, &#x60;referees&#x60;, &#x60;formations&#x60;, &#x60;substitutions&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;tag&#x60;
         * @param {string} [exclude] List of objects to exclude from API output, separated by comma: &#x60;possessions&#x60;, &#x60;names&#x60;, &#x60;positions&#x60;, &#x60;formations&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdEventsGet(wyId, fetch, details, exclude, authorization, options) {
            const localVarFetchArgs = EventsApiFetchParamCreator(configuration).matchesWyIdEventsGet(wyId, fetch, details, exclude, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Retrieves information about a given match's events
         * @summary MatchEvents
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;teams&#x60;, &#x60;players&#x60;, &#x60;match&#x60;, &#x60;coaches&#x60;, &#x60;referees&#x60;, &#x60;formations&#x60;, &#x60;substitutions&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;tag&#x60;
         * @param {string} [exclude] List of objects to exclude from API output, separated by comma: &#x60;possessions&#x60;, &#x60;names&#x60;, &#x60;positions&#x60;, &#x60;formations&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdEventsGet(wyId, fetch, details, exclude, authorization, options) {
            return EventsApiFp(configuration).matchesWyIdEventsGet(wyId, fetch, details, exclude, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * Retrieves information about a given match's events
     * @summary MatchEvents
     * @param {string} wyId Relevant content id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;teams&#x60;, &#x60;players&#x60;, &#x60;match&#x60;, &#x60;coaches&#x60;, &#x60;referees&#x60;, &#x60;formations&#x60;, &#x60;substitutions&#x60;
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;tag&#x60;
     * @param {string} [exclude] List of objects to exclude from API output, separated by comma: &#x60;possessions&#x60;, &#x60;names&#x60;, &#x60;positions&#x60;, &#x60;formations&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    matchesWyIdEventsGet(wyId, fetch, details, exclude, authorization, options) {
        return EventsApiFp(this.configuration).matchesWyIdEventsGet(wyId, fetch, details, exclude, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * ExtraApi - fetch parameter creator
 * @export
 */
export const ExtraApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Info about the recently updated resources.  Specific API call to keep track of updates on our database objects on a daily basis.  You can go back for a max of 168 hours (1 week). The payload of a week, especially for some tables, is huge, the ideal situation could be to call the updated objects even once every 1/2/3/4 hours or at least some times each day for every type of object you are interested in.  Maximum payload size is 10MB, when bigger the system will return a 400 error.  Where not differently specified, any time field refers to <i>Europe/Rome</i> timezone
         * @summary Updated Objects
         * @param {string} updatedSince Filter resources by date in the format YYYY-MM-DD HH:MM:SS (example: 2018-02-09 18:00:00), you can go back for a max of 168 hours (1 week)
         * @param {string} type Resource type: &#x60;areas&#x60;, &#x60;coaches&#x60;, &#x60;competitions&#x60;, &#x60;matches&#x60;, &#x60;matchevents&#x60;, &#x60;playercareers&#x60;, &#x60;playerinjuries&#x60;, &#x60;players&#x60;, &#x60;referees&#x60;, &#x60;rounds&#x60;, &#x60;seasons&#x60;, &#x60;teamcareers&#x60;, &#x60;teams&#x60;, &#x60;transfers&#x60;
         * @param {string} [emptyPayload] If true every resource id is returned without the respective payload (default is false)
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatedobjectsGet(updatedSince, type, emptyPayload, authorization, options = {}) {
            // verify required parameter 'updatedSince' is not null or undefined
            if (updatedSince === null || updatedSince === undefined) {
                throw new RequiredError('updatedSince', 'Required parameter updatedSince was null or undefined when calling updatedobjectsGet.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type', 'Required parameter type was null or undefined when calling updatedobjectsGet.');
            }
            const localVarPath = `/updatedobjects`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (updatedSince !== undefined) {
                localVarQueryParameter['updated_since'] = updatedSince;
            }
            if (emptyPayload !== undefined) {
                localVarQueryParameter['emptyPayload'] = emptyPayload;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ExtraApi - functional programming interface
 * @export
 */
export const ExtraApiFp = function (configuration) {
    return {
        /**
         * Info about the recently updated resources.  Specific API call to keep track of updates on our database objects on a daily basis.  You can go back for a max of 168 hours (1 week). The payload of a week, especially for some tables, is huge, the ideal situation could be to call the updated objects even once every 1/2/3/4 hours or at least some times each day for every type of object you are interested in.  Maximum payload size is 10MB, when bigger the system will return a 400 error.  Where not differently specified, any time field refers to <i>Europe/Rome</i> timezone
         * @summary Updated Objects
         * @param {string} updatedSince Filter resources by date in the format YYYY-MM-DD HH:MM:SS (example: 2018-02-09 18:00:00), you can go back for a max of 168 hours (1 week)
         * @param {string} type Resource type: &#x60;areas&#x60;, &#x60;coaches&#x60;, &#x60;competitions&#x60;, &#x60;matches&#x60;, &#x60;matchevents&#x60;, &#x60;playercareers&#x60;, &#x60;playerinjuries&#x60;, &#x60;players&#x60;, &#x60;referees&#x60;, &#x60;rounds&#x60;, &#x60;seasons&#x60;, &#x60;teamcareers&#x60;, &#x60;teams&#x60;, &#x60;transfers&#x60;
         * @param {string} [emptyPayload] If true every resource id is returned without the respective payload (default is false)
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatedobjectsGet(updatedSince, type, emptyPayload, authorization, options) {
            const localVarFetchArgs = ExtraApiFetchParamCreator(configuration).updatedobjectsGet(updatedSince, type, emptyPayload, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * ExtraApi - factory interface
 * @export
 */
export const ExtraApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Info about the recently updated resources.  Specific API call to keep track of updates on our database objects on a daily basis.  You can go back for a max of 168 hours (1 week). The payload of a week, especially for some tables, is huge, the ideal situation could be to call the updated objects even once every 1/2/3/4 hours or at least some times each day for every type of object you are interested in.  Maximum payload size is 10MB, when bigger the system will return a 400 error.  Where not differently specified, any time field refers to <i>Europe/Rome</i> timezone
         * @summary Updated Objects
         * @param {string} updatedSince Filter resources by date in the format YYYY-MM-DD HH:MM:SS (example: 2018-02-09 18:00:00), you can go back for a max of 168 hours (1 week)
         * @param {string} type Resource type: &#x60;areas&#x60;, &#x60;coaches&#x60;, &#x60;competitions&#x60;, &#x60;matches&#x60;, &#x60;matchevents&#x60;, &#x60;playercareers&#x60;, &#x60;playerinjuries&#x60;, &#x60;players&#x60;, &#x60;referees&#x60;, &#x60;rounds&#x60;, &#x60;seasons&#x60;, &#x60;teamcareers&#x60;, &#x60;teams&#x60;, &#x60;transfers&#x60;
         * @param {string} [emptyPayload] If true every resource id is returned without the respective payload (default is false)
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatedobjectsGet(updatedSince, type, emptyPayload, authorization, options) {
            return ExtraApiFp(configuration).updatedobjectsGet(updatedSince, type, emptyPayload, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * ExtraApi - object-oriented interface
 * @export
 * @class ExtraApi
 * @extends {BaseAPI}
 */
export class ExtraApi extends BaseAPI {
    /**
     * Info about the recently updated resources.  Specific API call to keep track of updates on our database objects on a daily basis.  You can go back for a max of 168 hours (1 week). The payload of a week, especially for some tables, is huge, the ideal situation could be to call the updated objects even once every 1/2/3/4 hours or at least some times each day for every type of object you are interested in.  Maximum payload size is 10MB, when bigger the system will return a 400 error.  Where not differently specified, any time field refers to <i>Europe/Rome</i> timezone
     * @summary Updated Objects
     * @param {string} updatedSince Filter resources by date in the format YYYY-MM-DD HH:MM:SS (example: 2018-02-09 18:00:00), you can go back for a max of 168 hours (1 week)
     * @param {string} type Resource type: &#x60;areas&#x60;, &#x60;coaches&#x60;, &#x60;competitions&#x60;, &#x60;matches&#x60;, &#x60;matchevents&#x60;, &#x60;playercareers&#x60;, &#x60;playerinjuries&#x60;, &#x60;players&#x60;, &#x60;referees&#x60;, &#x60;rounds&#x60;, &#x60;seasons&#x60;, &#x60;teamcareers&#x60;, &#x60;teams&#x60;, &#x60;transfers&#x60;
     * @param {string} [emptyPayload] If true every resource id is returned without the respective payload (default is false)
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExtraApi
     */
    updatedobjectsGet(updatedSince, type, emptyPayload, authorization, options) {
        return ExtraApiFp(this.configuration).updatedobjectsGet(updatedSince, type, emptyPayload, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * MatchesApi - fetch parameter creator
 * @export
 */
export const MatchesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Retrieves information about a given match's formations
         * @summary MatchFormations
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;teams&#x60;, &#x60;players&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdFormationsGet(wyId, fetch, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling matchesWyIdFormationsGet.');
            }
            const localVarPath = `/matches/{wyId}/formations`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns info about the given match
         * @summary Match detail
         * @param {string} wyId Relevant content id
         * @param {string} [useSides] Flag to change label (teamId –&gt; home or teamId –&gt; away)
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;coaches&#x60;, &#x60;players&#x60;, &#x60;teams&#x60;, &#x60;competition&#x60;, &#x60;round&#x60;, &#x60;season&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdGet(wyId, useSides, details, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling matchesWyIdGet.');
            }
            const localVarPath = `/matches/{wyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (useSides !== undefined) {
                localVarQueryParameter['useSides'] = useSides;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * MatchesApi - functional programming interface
 * @export
 */
export const MatchesApiFp = function (configuration) {
    return {
        /**
         * Retrieves information about a given match's formations
         * @summary MatchFormations
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;teams&#x60;, &#x60;players&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdFormationsGet(wyId, fetch, authorization, options) {
            const localVarFetchArgs = MatchesApiFetchParamCreator(configuration).matchesWyIdFormationsGet(wyId, fetch, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns info about the given match
         * @summary Match detail
         * @param {string} wyId Relevant content id
         * @param {string} [useSides] Flag to change label (teamId –&gt; home or teamId –&gt; away)
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;coaches&#x60;, &#x60;players&#x60;, &#x60;teams&#x60;, &#x60;competition&#x60;, &#x60;round&#x60;, &#x60;season&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdGet(wyId, useSides, details, authorization, options) {
            const localVarFetchArgs = MatchesApiFetchParamCreator(configuration).matchesWyIdGet(wyId, useSides, details, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * MatchesApi - factory interface
 * @export
 */
export const MatchesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Retrieves information about a given match's formations
         * @summary MatchFormations
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;teams&#x60;, &#x60;players&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdFormationsGet(wyId, fetch, authorization, options) {
            return MatchesApiFp(configuration).matchesWyIdFormationsGet(wyId, fetch, authorization, options)(fetch, basePath);
        },
        /**
         * Returns info about the given match
         * @summary Match detail
         * @param {string} wyId Relevant content id
         * @param {string} [useSides] Flag to change label (teamId –&gt; home or teamId –&gt; away)
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;coaches&#x60;, &#x60;players&#x60;, &#x60;teams&#x60;, &#x60;competition&#x60;, &#x60;round&#x60;, &#x60;season&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchesWyIdGet(wyId, useSides, details, authorization, options) {
            return MatchesApiFp(configuration).matchesWyIdGet(wyId, useSides, details, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * MatchesApi - object-oriented interface
 * @export
 * @class MatchesApi
 * @extends {BaseAPI}
 */
export class MatchesApi extends BaseAPI {
    /**
     * Retrieves information about a given match's formations
     * @summary MatchFormations
     * @param {string} wyId Relevant content id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;teams&#x60;, &#x60;players&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    matchesWyIdFormationsGet(wyId, fetch, authorization, options) {
        return MatchesApiFp(this.configuration).matchesWyIdFormationsGet(wyId, fetch, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns info about the given match
     * @summary Match detail
     * @param {string} wyId Relevant content id
     * @param {string} [useSides] Flag to change label (teamId –&gt; home or teamId –&gt; away)
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;coaches&#x60;, &#x60;players&#x60;, &#x60;teams&#x60;, &#x60;competition&#x60;, &#x60;round&#x60;, &#x60;season&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchesApi
     */
    matchesWyIdGet(wyId, useSides, details, authorization, options) {
        return MatchesApiFp(this.configuration).matchesWyIdGet(wyId, useSides, details, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * PlayersApi - fetch parameter creator
 * @export
 */
export const PlayersApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Returns info about the given player career
         * @summary Players career
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;player&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;team&#x60;, &#x60;competition&#x60;, &#x60;season&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdCareerGet(wyId, fetch, details, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdCareerGet.');
            }
            const localVarPath = `/players/{wyId}/career`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns info about the given player contract
         * @summary Players contract info
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;player&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdContractinfoGet(wyId, fetch, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdContractinfoGet.');
            }
            const localVarPath = `/players/{wyId}/contractinfo`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns info about the given player matches fixtures
         * @summary Players fixtures
         * @param {string} wyId Relevant content id
         * @param {string} [toDate] Ending date in YYYY-MM-DD format
         * @param {string} [fromDate] Starting date in YYYY-MM-DD format
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdFixturesGet(wyId, toDate, fromDate, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdFixturesGet.');
            }
            const localVarPath = `/players/{wyId}/fixtures`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = toDate;
            }
            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = fromDate;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns info about the given player
         * @summary Player details
         * @param {string} wyId Relevant content id
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;currentTeam&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdGet(wyId, details, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdGet.');
            }
            const localVarPath = `/players/{wyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns info about the given player matches
         * @summary Players matches
         * @param {string} wyId Relevant content id
         * @param {string} [seasonId] Relevant season id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;player&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdMatchesGet(wyId, seasonId, fetch, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdMatchesGet.');
            }
            const localVarPath = `/players/{wyId}/matches`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (seasonId !== undefined) {
                localVarQueryParameter['seasonId'] = seasonId;
            }
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns info about the given player transfers
         * @summary Players transfers
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;player&#x60;
         * @param {string} [alternative]
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdTransfersGet(wyId, fetch, alternative, details, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling playersWyIdTransfersGet.');
            }
            const localVarPath = `/players/{wyId}/transfers`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (alternative !== undefined) {
                localVarQueryParameter['alternative'] = alternative;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PlayersApi - functional programming interface
 * @export
 */
export const PlayersApiFp = function (configuration) {
    return {
        /**
         * Returns info about the given player career
         * @summary Players career
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;player&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;team&#x60;, &#x60;competition&#x60;, &#x60;season&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdCareerGet(wyId, fetch, details, authorization, options) {
            const localVarFetchArgs = PlayersApiFetchParamCreator(configuration).playersWyIdCareerGet(wyId, fetch, details, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns info about the given player contract
         * @summary Players contract info
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;player&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdContractinfoGet(wyId, fetch, authorization, options) {
            const localVarFetchArgs = PlayersApiFetchParamCreator(configuration).playersWyIdContractinfoGet(wyId, fetch, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns info about the given player matches fixtures
         * @summary Players fixtures
         * @param {string} wyId Relevant content id
         * @param {string} [toDate] Ending date in YYYY-MM-DD format
         * @param {string} [fromDate] Starting date in YYYY-MM-DD format
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdFixturesGet(wyId, toDate, fromDate, authorization, options) {
            const localVarFetchArgs = PlayersApiFetchParamCreator(configuration).playersWyIdFixturesGet(wyId, toDate, fromDate, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns info about the given player
         * @summary Player details
         * @param {string} wyId Relevant content id
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;currentTeam&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdGet(wyId, details, authorization, options) {
            const localVarFetchArgs = PlayersApiFetchParamCreator(configuration).playersWyIdGet(wyId, details, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns info about the given player matches
         * @summary Players matches
         * @param {string} wyId Relevant content id
         * @param {string} [seasonId] Relevant season id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;player&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdMatchesGet(wyId, seasonId, fetch, authorization, options) {
            const localVarFetchArgs = PlayersApiFetchParamCreator(configuration).playersWyIdMatchesGet(wyId, seasonId, fetch, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns info about the given player transfers
         * @summary Players transfers
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;player&#x60;
         * @param {string} [alternative]
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdTransfersGet(wyId, fetch, alternative, details, authorization, options) {
            const localVarFetchArgs = PlayersApiFetchParamCreator(configuration).playersWyIdTransfersGet(wyId, fetch, alternative, details, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * PlayersApi - factory interface
 * @export
 */
export const PlayersApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Returns info about the given player career
         * @summary Players career
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;player&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;team&#x60;, &#x60;competition&#x60;, &#x60;season&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdCareerGet(wyId, fetch, details, authorization, options) {
            return PlayersApiFp(configuration).playersWyIdCareerGet(wyId, fetch, details, authorization, options)(fetch, basePath);
        },
        /**
         * Returns info about the given player contract
         * @summary Players contract info
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;player&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdContractinfoGet(wyId, fetch, authorization, options) {
            return PlayersApiFp(configuration).playersWyIdContractinfoGet(wyId, fetch, authorization, options)(fetch, basePath);
        },
        /**
         * Returns info about the given player matches fixtures
         * @summary Players fixtures
         * @param {string} wyId Relevant content id
         * @param {string} [toDate] Ending date in YYYY-MM-DD format
         * @param {string} [fromDate] Starting date in YYYY-MM-DD format
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdFixturesGet(wyId, toDate, fromDate, authorization, options) {
            return PlayersApiFp(configuration).playersWyIdFixturesGet(wyId, toDate, fromDate, authorization, options)(fetch, basePath);
        },
        /**
         * Returns info about the given player
         * @summary Player details
         * @param {string} wyId Relevant content id
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;currentTeam&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdGet(wyId, details, authorization, options) {
            return PlayersApiFp(configuration).playersWyIdGet(wyId, details, authorization, options)(fetch, basePath);
        },
        /**
         * Returns info about the given player matches
         * @summary Players matches
         * @param {string} wyId Relevant content id
         * @param {string} [seasonId] Relevant season id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;player&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdMatchesGet(wyId, seasonId, fetch, authorization, options) {
            return PlayersApiFp(configuration).playersWyIdMatchesGet(wyId, seasonId, fetch, authorization, options)(fetch, basePath);
        },
        /**
         * Returns info about the given player transfers
         * @summary Players transfers
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;player&#x60;
         * @param {string} [alternative]
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        playersWyIdTransfersGet(wyId, fetch, alternative, details, authorization, options) {
            return PlayersApiFp(configuration).playersWyIdTransfersGet(wyId, fetch, alternative, details, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * PlayersApi - object-oriented interface
 * @export
 * @class PlayersApi
 * @extends {BaseAPI}
 */
export class PlayersApi extends BaseAPI {
    /**
     * Returns info about the given player career
     * @summary Players career
     * @param {string} wyId Relevant content id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;player&#x60;
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;team&#x60;, &#x60;competition&#x60;, &#x60;season&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    playersWyIdCareerGet(wyId, fetch, details, authorization, options) {
        return PlayersApiFp(this.configuration).playersWyIdCareerGet(wyId, fetch, details, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns info about the given player contract
     * @summary Players contract info
     * @param {string} wyId Relevant content id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;player&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    playersWyIdContractinfoGet(wyId, fetch, authorization, options) {
        return PlayersApiFp(this.configuration).playersWyIdContractinfoGet(wyId, fetch, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns info about the given player matches fixtures
     * @summary Players fixtures
     * @param {string} wyId Relevant content id
     * @param {string} [toDate] Ending date in YYYY-MM-DD format
     * @param {string} [fromDate] Starting date in YYYY-MM-DD format
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    playersWyIdFixturesGet(wyId, toDate, fromDate, authorization, options) {
        return PlayersApiFp(this.configuration).playersWyIdFixturesGet(wyId, toDate, fromDate, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns info about the given player
     * @summary Player details
     * @param {string} wyId Relevant content id
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;currentTeam&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    playersWyIdGet(wyId, details, authorization, options) {
        return PlayersApiFp(this.configuration).playersWyIdGet(wyId, details, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns info about the given player matches
     * @summary Players matches
     * @param {string} wyId Relevant content id
     * @param {string} [seasonId] Relevant season id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;player&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    playersWyIdMatchesGet(wyId, seasonId, fetch, authorization, options) {
        return PlayersApiFp(this.configuration).playersWyIdMatchesGet(wyId, seasonId, fetch, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns info about the given player transfers
     * @summary Players transfers
     * @param {string} wyId Relevant content id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;player&#x60;
     * @param {string} [alternative]
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    playersWyIdTransfersGet(wyId, fetch, alternative, details, authorization, options) {
        return PlayersApiFp(this.configuration).playersWyIdTransfersGet(wyId, fetch, alternative, details, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * RefereesApi - fetch parameter creator
 * @export
 */
export const RefereesApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Returns info about the given referee
         * @summary Referee details
         * @param {string} wyId
         * @param {string} [imageDataURL] If true adds the base64 encoded referee image to the payload
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refereesWyIdGet(wyId, imageDataURL, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling refereesWyIdGet.');
            }
            const localVarPath = `/referees/{wyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (imageDataURL !== undefined) {
                localVarQueryParameter['imageDataURL'] = imageDataURL;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RefereesApi - functional programming interface
 * @export
 */
export const RefereesApiFp = function (configuration) {
    return {
        /**
         * Returns info about the given referee
         * @summary Referee details
         * @param {string} wyId
         * @param {string} [imageDataURL] If true adds the base64 encoded referee image to the payload
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refereesWyIdGet(wyId, imageDataURL, authorization, options) {
            const localVarFetchArgs = RefereesApiFetchParamCreator(configuration).refereesWyIdGet(wyId, imageDataURL, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * RefereesApi - factory interface
 * @export
 */
export const RefereesApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Returns info about the given referee
         * @summary Referee details
         * @param {string} wyId
         * @param {string} [imageDataURL] If true adds the base64 encoded referee image to the payload
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refereesWyIdGet(wyId, imageDataURL, authorization, options) {
            return RefereesApiFp(configuration).refereesWyIdGet(wyId, imageDataURL, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * RefereesApi - object-oriented interface
 * @export
 * @class RefereesApi
 * @extends {BaseAPI}
 */
export class RefereesApi extends BaseAPI {
    /**
     * Returns info about the given referee
     * @summary Referee details
     * @param {string} wyId
     * @param {string} [imageDataURL] If true adds the base64 encoded referee image to the payload
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RefereesApi
     */
    refereesWyIdGet(wyId, imageDataURL, authorization, options) {
        return RefereesApiFp(this.configuration).refereesWyIdGet(wyId, imageDataURL, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * RoundsApi - fetch parameter creator
 * @export
 */
export const RoundsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Returns info about the given round
         * @summary Rounds
         * @param {string} wyId Relevant content id
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundsWyIdGet(wyId, details, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling roundsWyIdGet.');
            }
            const localVarPath = `/rounds/{wyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * RoundsApi - functional programming interface
 * @export
 */
export const RoundsApiFp = function (configuration) {
    return {
        /**
         * Returns info about the given round
         * @summary Rounds
         * @param {string} wyId Relevant content id
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundsWyIdGet(wyId, details, authorization, options) {
            const localVarFetchArgs = RoundsApiFetchParamCreator(configuration).roundsWyIdGet(wyId, details, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * RoundsApi - factory interface
 * @export
 */
export const RoundsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Returns info about the given round
         * @summary Rounds
         * @param {string} wyId Relevant content id
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundsWyIdGet(wyId, details, authorization, options) {
            return RoundsApiFp(configuration).roundsWyIdGet(wyId, details, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * RoundsApi - object-oriented interface
 * @export
 * @class RoundsApi
 * @extends {BaseAPI}
 */
export class RoundsApi extends BaseAPI {
    /**
     * Returns info about the given round
     * @summary Rounds
     * @param {string} wyId Relevant content id
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoundsApi
     */
    roundsWyIdGet(wyId, details, authorization, options) {
        return RoundsApiFp(this.configuration).roundsWyIdGet(wyId, details, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * SearchApi - fetch parameter creator
 * @export
 */
export const SearchApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Returns a list of objects, matching the provided search string
         * @summary Search
         * @param {string} query The string to be matched with the resource&#x27;s name
         * @param {string} objType Object to be retrieved (only the first type is considered): &#x60;competition&#x60;, &#x60;team&#x60;, &#x60;player&#x60;, &#x60;referee&#x60;
         * @param {string} [gender] Object to be retrieved (only the first type is considered): &#x60;men&#x60;, &#x60;women&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGet(query, objType, gender, authorization, options = {}) {
            // verify required parameter 'query' is not null or undefined
            if (query === null || query === undefined) {
                throw new RequiredError('query', 'Required parameter query was null or undefined when calling searchGet.');
            }
            // verify required parameter 'objType' is not null or undefined
            if (objType === null || objType === undefined) {
                throw new RequiredError('objType', 'Required parameter objType was null or undefined when calling searchGet.');
            }
            const localVarPath = `/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }
            if (gender !== undefined) {
                localVarQueryParameter['gender'] = gender;
            }
            if (objType !== undefined) {
                localVarQueryParameter['objType'] = objType;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function (configuration) {
    return {
        /**
         * Returns a list of objects, matching the provided search string
         * @summary Search
         * @param {string} query The string to be matched with the resource&#x27;s name
         * @param {string} objType Object to be retrieved (only the first type is considered): &#x60;competition&#x60;, &#x60;team&#x60;, &#x60;player&#x60;, &#x60;referee&#x60;
         * @param {string} [gender] Object to be retrieved (only the first type is considered): &#x60;men&#x60;, &#x60;women&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGet(query, objType, gender, authorization, options) {
            const localVarFetchArgs = SearchApiFetchParamCreator(configuration).searchGet(query, objType, gender, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Returns a list of objects, matching the provided search string
         * @summary Search
         * @param {string} query The string to be matched with the resource&#x27;s name
         * @param {string} objType Object to be retrieved (only the first type is considered): &#x60;competition&#x60;, &#x60;team&#x60;, &#x60;player&#x60;, &#x60;referee&#x60;
         * @param {string} [gender] Object to be retrieved (only the first type is considered): &#x60;men&#x60;, &#x60;women&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchGet(query, objType, gender, authorization, options) {
            return SearchApiFp(configuration).searchGet(query, objType, gender, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * Returns a list of objects, matching the provided search string
     * @summary Search
     * @param {string} query The string to be matched with the resource&#x27;s name
     * @param {string} objType Object to be retrieved (only the first type is considered): &#x60;competition&#x60;, &#x60;team&#x60;, &#x60;player&#x60;, &#x60;referee&#x60;
     * @param {string} [gender] Object to be retrieved (only the first type is considered): &#x60;men&#x60;, &#x60;women&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    searchGet(query, objType, gender, authorization, options) {
        return SearchApiFp(this.configuration).searchGet(query, objType, gender, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * SeasonsApi - fetch parameter creator
 * @export
 */
export const SeasonsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Returns info about the given season assistmen
         * @summary Season assistmen
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;, &#x60;competition&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;players&#x60;, &#x60;teams&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdAssistmenGet(wyId, fetch, details, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdAssistmenGet.');
            }
            const localVarPath = `/seasons/{wyId}/assistmen`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns general performance information about all the teams for the given season
         * @summary Seasons career
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;team&#x60;, &#x60;round&#x60;
         * @param {string} [filters] &lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Object&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;gameWeek&lt;/td&gt;&lt;td&gt;If present, it returns standings for that gameweek&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;gameWeekInterval&lt;/td&gt;&lt;td&gt;If present, it returns standings for that gameweeks’ range Use: {\&quot;gameWeekInterval\&quot;:{\&quot;startWeek\&quot;:7,\&quot;endWeek\&quot;:12}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdCareerGet(wyId, fetch, details, filters, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdCareerGet.');
            }
            const localVarPath = `/seasons/{wyId}/career`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all the matches for the given season
         * @summary Seasons fixtures
         * @param {string} wyId Relevant content id
         * @param {string} [toDate] Ending date in YYYY-MM-DD format
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;matches&#x60;, &#x60;players&#x60;, &#x60;teams&#x60;
         * @param {string} [fromDate] Starting date in YYYY-MM-DD format
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdFixturesGet(wyId, toDate, fetch, details, fromDate, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdFixturesGet.');
            }
            const localVarPath = `/seasons/{wyId}/fixtures`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = toDate;
            }
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = fromDate;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns info about the given season
         * @summary Season details
         * @param {string} wyId Relevant content id
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;competition&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdGet(wyId, details, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdGet.');
            }
            const localVarPath = `/seasons/{wyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of matches played in the given season
         * @summary Seasons matches
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdMatchesGet(wyId, fetch, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdMatchesGet.');
            }
            const localVarPath = `/seasons/{wyId}/matches`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of players who have played in the given season
         * @summary Seasons players
         * @param {string} wyId Relevant content id
         * @param {string} [count] Alias for limit argument
         * @param {string} [limit] Allows to change the number of results for page (limited to max 100 results for single page)
         * @param {string} [sort] Allows to sort resultset by given field and directions
         * @param {string} [authorization]
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;
         * @param {string} [page] Allows to change page (current page) from which the results are fetched
         * @param {string} [search] Allows to simple search and filter resultset by OR condition among defined search fields
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;currentTeam&#x60;
         * @param {string} [filter] Allows to simple filter resultset by AND and EQUAL condition on given field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdPlayersGet(wyId, count, limit, sort, authorization, fetch, page, search, details, filter, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdPlayersGet.');
            }
            const localVarPath = `/seasons/{wyId}/players`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (count !== undefined) {
                localVarQueryParameter['count'] = count;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns info about the given season scorers
         * @summary Season scorers
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;, &#x60;competition&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;players&#x60;, &#x60;teams&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdScorersGet(wyId, fetch, details, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdScorersGet.');
            }
            const localVarPath = `/seasons/{wyId}/scorers`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the standings for the given season
         * @summary Seasons standings
         * @param {string} wyId Relevant content id
         * @param {string} [roundId] Relevant round id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdStandingsGet(wyId, roundId, fetch, details, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdStandingsGet.');
            }
            const localVarPath = `/seasons/{wyId}/standings`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (roundId !== undefined) {
                localVarQueryParameter['roundId'] = roundId;
            }
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of teams in the given season. Please note: the call returns only the teams that already played at least one match in the season.
         * @summary Seasons teams
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdTeamsGet(wyId, fetch, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdTeamsGet.');
            }
            const localVarPath = `/seasons/{wyId}/teams`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all the transfer's information for the given season
         * @summary Seasons transfers
         * @param {string} wyId Relevant content id
         * @param {string} [toDate] Ending date in YYYY-MM-DD format
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;, &#x60;player&#x60;
         * @param {string} [fromDate] Starting date in YYYY-MM-DD format
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdTransfersGet(wyId, toDate, details, fromDate, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling seasonsWyIdTransfersGet.');
            }
            const localVarPath = `/seasons/{wyId}/transfers`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = toDate;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = fromDate;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SeasonsApi - functional programming interface
 * @export
 */
export const SeasonsApiFp = function (configuration) {
    return {
        /**
         * Returns info about the given season assistmen
         * @summary Season assistmen
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;, &#x60;competition&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;players&#x60;, &#x60;teams&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdAssistmenGet(wyId, fetch, details, authorization, options) {
            const localVarFetchArgs = SeasonsApiFetchParamCreator(configuration).seasonsWyIdAssistmenGet(wyId, fetch, details, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns general performance information about all the teams for the given season
         * @summary Seasons career
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;team&#x60;, &#x60;round&#x60;
         * @param {string} [filters] &lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Object&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;gameWeek&lt;/td&gt;&lt;td&gt;If present, it returns standings for that gameweek&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;gameWeekInterval&lt;/td&gt;&lt;td&gt;If present, it returns standings for that gameweeks’ range Use: {\&quot;gameWeekInterval\&quot;:{\&quot;startWeek\&quot;:7,\&quot;endWeek\&quot;:12}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdCareerGet(wyId, fetch, details, filters, authorization, options) {
            const localVarFetchArgs = SeasonsApiFetchParamCreator(configuration).seasonsWyIdCareerGet(wyId, fetch, details, filters, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves all the matches for the given season
         * @summary Seasons fixtures
         * @param {string} wyId Relevant content id
         * @param {string} [toDate] Ending date in YYYY-MM-DD format
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;matches&#x60;, &#x60;players&#x60;, &#x60;teams&#x60;
         * @param {string} [fromDate] Starting date in YYYY-MM-DD format
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdFixturesGet(wyId, toDate, fetch, details, fromDate, authorization, options) {
            const localVarFetchArgs = SeasonsApiFetchParamCreator(configuration).seasonsWyIdFixturesGet(wyId, toDate, fetch, details, fromDate, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns info about the given season
         * @summary Season details
         * @param {string} wyId Relevant content id
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;competition&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdGet(wyId, details, authorization, options) {
            const localVarFetchArgs = SeasonsApiFetchParamCreator(configuration).seasonsWyIdGet(wyId, details, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the list of matches played in the given season
         * @summary Seasons matches
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdMatchesGet(wyId, fetch, authorization, options) {
            const localVarFetchArgs = SeasonsApiFetchParamCreator(configuration).seasonsWyIdMatchesGet(wyId, fetch, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the list of players who have played in the given season
         * @summary Seasons players
         * @param {string} wyId Relevant content id
         * @param {string} [count] Alias for limit argument
         * @param {string} [limit] Allows to change the number of results for page (limited to max 100 results for single page)
         * @param {string} [sort] Allows to sort resultset by given field and directions
         * @param {string} [authorization]
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;
         * @param {string} [page] Allows to change page (current page) from which the results are fetched
         * @param {string} [search] Allows to simple search and filter resultset by OR condition among defined search fields
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;currentTeam&#x60;
         * @param {string} [filter] Allows to simple filter resultset by AND and EQUAL condition on given field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdPlayersGet(wyId, count, limit, sort, authorization, fetch, page, search, details, filter, options) {
            const localVarFetchArgs = SeasonsApiFetchParamCreator(configuration).seasonsWyIdPlayersGet(wyId, count, limit, sort, authorization, fetch, page, search, details, filter, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns info about the given season scorers
         * @summary Season scorers
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;, &#x60;competition&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;players&#x60;, &#x60;teams&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdScorersGet(wyId, fetch, details, authorization, options) {
            const localVarFetchArgs = SeasonsApiFetchParamCreator(configuration).seasonsWyIdScorersGet(wyId, fetch, details, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the standings for the given season
         * @summary Seasons standings
         * @param {string} wyId Relevant content id
         * @param {string} [roundId] Relevant round id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdStandingsGet(wyId, roundId, fetch, details, authorization, options) {
            const localVarFetchArgs = SeasonsApiFetchParamCreator(configuration).seasonsWyIdStandingsGet(wyId, roundId, fetch, details, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the list of teams in the given season. Please note: the call returns only the teams that already played at least one match in the season.
         * @summary Seasons teams
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdTeamsGet(wyId, fetch, authorization, options) {
            const localVarFetchArgs = SeasonsApiFetchParamCreator(configuration).seasonsWyIdTeamsGet(wyId, fetch, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves all the transfer's information for the given season
         * @summary Seasons transfers
         * @param {string} wyId Relevant content id
         * @param {string} [toDate] Ending date in YYYY-MM-DD format
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;, &#x60;player&#x60;
         * @param {string} [fromDate] Starting date in YYYY-MM-DD format
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdTransfersGet(wyId, toDate, details, fromDate, authorization, options) {
            const localVarFetchArgs = SeasonsApiFetchParamCreator(configuration).seasonsWyIdTransfersGet(wyId, toDate, details, fromDate, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * SeasonsApi - factory interface
 * @export
 */
export const SeasonsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Returns info about the given season assistmen
         * @summary Season assistmen
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;, &#x60;competition&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;players&#x60;, &#x60;teams&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdAssistmenGet(wyId, fetch, details, authorization, options) {
            return SeasonsApiFp(configuration).seasonsWyIdAssistmenGet(wyId, fetch, details, authorization, options)(fetch, basePath);
        },
        /**
         * Returns general performance information about all the teams for the given season
         * @summary Seasons career
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;team&#x60;, &#x60;round&#x60;
         * @param {string} [filters] &lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Object&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;gameWeek&lt;/td&gt;&lt;td&gt;If present, it returns standings for that gameweek&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;gameWeekInterval&lt;/td&gt;&lt;td&gt;If present, it returns standings for that gameweeks’ range Use: {\&quot;gameWeekInterval\&quot;:{\&quot;startWeek\&quot;:7,\&quot;endWeek\&quot;:12}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdCareerGet(wyId, fetch, details, filters, authorization, options) {
            return SeasonsApiFp(configuration).seasonsWyIdCareerGet(wyId, fetch, details, filters, authorization, options)(fetch, basePath);
        },
        /**
         * Retrieves all the matches for the given season
         * @summary Seasons fixtures
         * @param {string} wyId Relevant content id
         * @param {string} [toDate] Ending date in YYYY-MM-DD format
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;matches&#x60;, &#x60;players&#x60;, &#x60;teams&#x60;
         * @param {string} [fromDate] Starting date in YYYY-MM-DD format
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdFixturesGet(wyId, toDate, fetch, details, fromDate, authorization, options) {
            return SeasonsApiFp(configuration).seasonsWyIdFixturesGet(wyId, toDate, fetch, details, fromDate, authorization, options)(fetch, basePath);
        },
        /**
         * Returns info about the given season
         * @summary Season details
         * @param {string} wyId Relevant content id
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;competition&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdGet(wyId, details, authorization, options) {
            return SeasonsApiFp(configuration).seasonsWyIdGet(wyId, details, authorization, options)(fetch, basePath);
        },
        /**
         * Returns the list of matches played in the given season
         * @summary Seasons matches
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdMatchesGet(wyId, fetch, authorization, options) {
            return SeasonsApiFp(configuration).seasonsWyIdMatchesGet(wyId, fetch, authorization, options)(fetch, basePath);
        },
        /**
         * Returns the list of players who have played in the given season
         * @summary Seasons players
         * @param {string} wyId Relevant content id
         * @param {string} [count] Alias for limit argument
         * @param {string} [limit] Allows to change the number of results for page (limited to max 100 results for single page)
         * @param {string} [sort] Allows to sort resultset by given field and directions
         * @param {string} [authorization]
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;
         * @param {string} [page] Allows to change page (current page) from which the results are fetched
         * @param {string} [search] Allows to simple search and filter resultset by OR condition among defined search fields
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;currentTeam&#x60;
         * @param {string} [filter] Allows to simple filter resultset by AND and EQUAL condition on given field
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdPlayersGet(wyId, count, limit, sort, authorization, fetch, page, search, details, filter, options) {
            return SeasonsApiFp(configuration).seasonsWyIdPlayersGet(wyId, count, limit, sort, authorization, fetch, page, search, details, filter, options)(fetch, basePath);
        },
        /**
         * Returns info about the given season scorers
         * @summary Season scorers
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;, &#x60;competition&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;players&#x60;, &#x60;teams&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdScorersGet(wyId, fetch, details, authorization, options) {
            return SeasonsApiFp(configuration).seasonsWyIdScorersGet(wyId, fetch, details, authorization, options)(fetch, basePath);
        },
        /**
         * Returns the standings for the given season
         * @summary Seasons standings
         * @param {string} wyId Relevant content id
         * @param {string} [roundId] Relevant round id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdStandingsGet(wyId, roundId, fetch, details, authorization, options) {
            return SeasonsApiFp(configuration).seasonsWyIdStandingsGet(wyId, roundId, fetch, details, authorization, options)(fetch, basePath);
        },
        /**
         * Returns the list of teams in the given season. Please note: the call returns only the teams that already played at least one match in the season.
         * @summary Seasons teams
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdTeamsGet(wyId, fetch, authorization, options) {
            return SeasonsApiFp(configuration).seasonsWyIdTeamsGet(wyId, fetch, authorization, options)(fetch, basePath);
        },
        /**
         * Retrieves all the transfer's information for the given season
         * @summary Seasons transfers
         * @param {string} wyId Relevant content id
         * @param {string} [toDate] Ending date in YYYY-MM-DD format
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;, &#x60;player&#x60;
         * @param {string} [fromDate] Starting date in YYYY-MM-DD format
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        seasonsWyIdTransfersGet(wyId, toDate, details, fromDate, authorization, options) {
            return SeasonsApiFp(configuration).seasonsWyIdTransfersGet(wyId, toDate, details, fromDate, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * SeasonsApi - object-oriented interface
 * @export
 * @class SeasonsApi
 * @extends {BaseAPI}
 */
export class SeasonsApi extends BaseAPI {
    /**
     * Returns info about the given season assistmen
     * @summary Season assistmen
     * @param {string} wyId Relevant content id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;, &#x60;competition&#x60;
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;players&#x60;, &#x60;teams&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    seasonsWyIdAssistmenGet(wyId, fetch, details, authorization, options) {
        return SeasonsApiFp(this.configuration).seasonsWyIdAssistmenGet(wyId, fetch, details, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns general performance information about all the teams for the given season
     * @summary Seasons career
     * @param {string} wyId Relevant content id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;team&#x60;, &#x60;round&#x60;
     * @param {string} [filters] &lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Object&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;gameWeek&lt;/td&gt;&lt;td&gt;If present, it returns standings for that gameweek&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;gameWeekInterval&lt;/td&gt;&lt;td&gt;If present, it returns standings for that gameweeks’ range Use: {\&quot;gameWeekInterval\&quot;:{\&quot;startWeek\&quot;:7,\&quot;endWeek\&quot;:12}}&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    seasonsWyIdCareerGet(wyId, fetch, details, filters, authorization, options) {
        return SeasonsApiFp(this.configuration).seasonsWyIdCareerGet(wyId, fetch, details, filters, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Retrieves all the matches for the given season
     * @summary Seasons fixtures
     * @param {string} wyId Relevant content id
     * @param {string} [toDate] Ending date in YYYY-MM-DD format
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;matches&#x60;, &#x60;players&#x60;, &#x60;teams&#x60;
     * @param {string} [fromDate] Starting date in YYYY-MM-DD format
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    seasonsWyIdFixturesGet(wyId, toDate, fetch, details, fromDate, authorization, options) {
        return SeasonsApiFp(this.configuration).seasonsWyIdFixturesGet(wyId, toDate, fetch, details, fromDate, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns info about the given season
     * @summary Season details
     * @param {string} wyId Relevant content id
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;competition&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    seasonsWyIdGet(wyId, details, authorization, options) {
        return SeasonsApiFp(this.configuration).seasonsWyIdGet(wyId, details, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns the list of matches played in the given season
     * @summary Seasons matches
     * @param {string} wyId Relevant content id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    seasonsWyIdMatchesGet(wyId, fetch, authorization, options) {
        return SeasonsApiFp(this.configuration).seasonsWyIdMatchesGet(wyId, fetch, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns the list of players who have played in the given season
     * @summary Seasons players
     * @param {string} wyId Relevant content id
     * @param {string} [count] Alias for limit argument
     * @param {string} [limit] Allows to change the number of results for page (limited to max 100 results for single page)
     * @param {string} [sort] Allows to sort resultset by given field and directions
     * @param {string} [authorization]
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;
     * @param {string} [page] Allows to change page (current page) from which the results are fetched
     * @param {string} [search] Allows to simple search and filter resultset by OR condition among defined search fields
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;currentTeam&#x60;
     * @param {string} [filter] Allows to simple filter resultset by AND and EQUAL condition on given field
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    seasonsWyIdPlayersGet(wyId, count, limit, sort, authorization, fetch, page, search, details, filter, options) {
        return SeasonsApiFp(this.configuration).seasonsWyIdPlayersGet(wyId, count, limit, sort, authorization, fetch, page, search, details, filter, options)(this.fetch, this.basePath);
    }
    /**
     * Returns info about the given season scorers
     * @summary Season scorers
     * @param {string} wyId Relevant content id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;, &#x60;competition&#x60;
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;players&#x60;, &#x60;teams&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    seasonsWyIdScorersGet(wyId, fetch, details, authorization, options) {
        return SeasonsApiFp(this.configuration).seasonsWyIdScorersGet(wyId, fetch, details, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns the standings for the given season
     * @summary Seasons standings
     * @param {string} wyId Relevant content id
     * @param {string} [roundId] Relevant round id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;competition&#x60;, &#x60;season&#x60;
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    seasonsWyIdStandingsGet(wyId, roundId, fetch, details, authorization, options) {
        return SeasonsApiFp(this.configuration).seasonsWyIdStandingsGet(wyId, roundId, fetch, details, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns the list of teams in the given season. Please note: the call returns only the teams that already played at least one match in the season.
     * @summary Seasons teams
     * @param {string} wyId Relevant content id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;season&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    seasonsWyIdTeamsGet(wyId, fetch, authorization, options) {
        return SeasonsApiFp(this.configuration).seasonsWyIdTeamsGet(wyId, fetch, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Retrieves all the transfer's information for the given season
     * @summary Seasons transfers
     * @param {string} wyId Relevant content id
     * @param {string} [toDate] Ending date in YYYY-MM-DD format
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;, &#x60;player&#x60;
     * @param {string} [fromDate] Starting date in YYYY-MM-DD format
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeasonsApi
     */
    seasonsWyIdTransfersGet(wyId, toDate, details, fromDate, authorization, options) {
        return SeasonsApiFp(this.configuration).seasonsWyIdTransfersGet(wyId, toDate, details, fromDate, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * TeamsApi - fetch parameter creator
 * @export
 */
export const TeamsApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Returns all the team career information
         * @summary Team careers
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;team&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;season&#x60;, &#x60;competition&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdCareerGet(wyId, fetch, details, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdCareerGet.');
            }
            const localVarPath = `/teams/{wyId}/career`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all the fixtures matches for the given team.
         * @summary Teams fixtures
         * @param {string} wyId Relevant content id
         * @param {string} [toDate] Ending date in YYYY-MM-DD format
         * @param {string} [fromDate] Starting date in YYYY-MM-DD format
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdFixturesGet(wyId, toDate, fromDate, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdFixturesGet.');
            }
            const localVarPath = `/teams/{wyId}/fixtures`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = toDate;
            }
            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = fromDate;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns info about the given team
         * @summary Team details
         * @param {string} wyId
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdGet(wyId, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdGet.');
            }
            const localVarPath = `/teams/{wyId}`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of matches played by the given team
         * @summary Teams matches
         * @param {string} wyId Relevant content id
         * @param {string} [seasonId] Relevant season id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;team&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdMatchesGet(wyId, seasonId, fetch, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdMatchesGet.');
            }
            const localVarPath = `/teams/{wyId}/matches`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (seasonId !== undefined) {
                localVarQueryParameter['seasonId'] = seasonId;
            }
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of players currently playing for the given team
         * @summary Teams squad
         * @param {string} wyId Relevant content id
         * @param {string} [seasonId] Relevant season id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;team&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdSquadGet(wyId, seasonId, fetch, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdSquadGet.');
            }
            const localVarPath = `/teams/{wyId}/squad`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (seasonId !== undefined) {
                localVarQueryParameter['seasonId'] = seasonId;
            }
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all the transfer's information for the given team
         * @summary Teams transfers
         * @param {string} wyId Relevant content id
         * @param {string} [toDate] Ending date in YYYY-MM-DD format
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;, &#x60;player&#x60;
         * @param {string} [fromDate] Starting date in YYYY-MM-DD format
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdTransfersGet(wyId, toDate, details, fromDate, authorization, options = {}) {
            // verify required parameter 'wyId' is not null or undefined
            if (wyId === null || wyId === undefined) {
                throw new RequiredError('wyId', 'Required parameter wyId was null or undefined when calling teamsWyIdTransfersGet.');
            }
            const localVarPath = `/teams/{wyId}/transfers`
                .replace(`{${"wyId"}}`, encodeURIComponent(String(wyId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (toDate !== undefined) {
                localVarQueryParameter['toDate'] = toDate;
            }
            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }
            if (fromDate !== undefined) {
                localVarQueryParameter['fromDate'] = fromDate;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function (configuration) {
    return {
        /**
         * Returns all the team career information
         * @summary Team careers
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;team&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;season&#x60;, &#x60;competition&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdCareerGet(wyId, fetch, details, authorization, options) {
            const localVarFetchArgs = TeamsApiFetchParamCreator(configuration).teamsWyIdCareerGet(wyId, fetch, details, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves all the fixtures matches for the given team.
         * @summary Teams fixtures
         * @param {string} wyId Relevant content id
         * @param {string} [toDate] Ending date in YYYY-MM-DD format
         * @param {string} [fromDate] Starting date in YYYY-MM-DD format
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdFixturesGet(wyId, toDate, fromDate, authorization, options) {
            const localVarFetchArgs = TeamsApiFetchParamCreator(configuration).teamsWyIdFixturesGet(wyId, toDate, fromDate, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns info about the given team
         * @summary Team details
         * @param {string} wyId
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdGet(wyId, authorization, options) {
            const localVarFetchArgs = TeamsApiFetchParamCreator(configuration).teamsWyIdGet(wyId, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the list of matches played by the given team
         * @summary Teams matches
         * @param {string} wyId Relevant content id
         * @param {string} [seasonId] Relevant season id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;team&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdMatchesGet(wyId, seasonId, fetch, authorization, options) {
            const localVarFetchArgs = TeamsApiFetchParamCreator(configuration).teamsWyIdMatchesGet(wyId, seasonId, fetch, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the list of players currently playing for the given team
         * @summary Teams squad
         * @param {string} wyId Relevant content id
         * @param {string} [seasonId] Relevant season id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;team&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdSquadGet(wyId, seasonId, fetch, authorization, options) {
            const localVarFetchArgs = TeamsApiFetchParamCreator(configuration).teamsWyIdSquadGet(wyId, seasonId, fetch, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Retrieves all the transfer's information for the given team
         * @summary Teams transfers
         * @param {string} wyId Relevant content id
         * @param {string} [toDate] Ending date in YYYY-MM-DD format
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;, &#x60;player&#x60;
         * @param {string} [fromDate] Starting date in YYYY-MM-DD format
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdTransfersGet(wyId, toDate, details, fromDate, authorization, options) {
            const localVarFetchArgs = TeamsApiFetchParamCreator(configuration).teamsWyIdTransfersGet(wyId, toDate, details, fromDate, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Returns all the team career information
         * @summary Team careers
         * @param {string} wyId Relevant content id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;team&#x60;
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;season&#x60;, &#x60;competition&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdCareerGet(wyId, fetch, details, authorization, options) {
            return TeamsApiFp(configuration).teamsWyIdCareerGet(wyId, fetch, details, authorization, options)(fetch, basePath);
        },
        /**
         * Retrieves all the fixtures matches for the given team.
         * @summary Teams fixtures
         * @param {string} wyId Relevant content id
         * @param {string} [toDate] Ending date in YYYY-MM-DD format
         * @param {string} [fromDate] Starting date in YYYY-MM-DD format
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdFixturesGet(wyId, toDate, fromDate, authorization, options) {
            return TeamsApiFp(configuration).teamsWyIdFixturesGet(wyId, toDate, fromDate, authorization, options)(fetch, basePath);
        },
        /**
         * Returns info about the given team
         * @summary Team details
         * @param {string} wyId
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdGet(wyId, authorization, options) {
            return TeamsApiFp(configuration).teamsWyIdGet(wyId, authorization, options)(fetch, basePath);
        },
        /**
         * Returns the list of matches played by the given team
         * @summary Teams matches
         * @param {string} wyId Relevant content id
         * @param {string} [seasonId] Relevant season id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;team&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdMatchesGet(wyId, seasonId, fetch, authorization, options) {
            return TeamsApiFp(configuration).teamsWyIdMatchesGet(wyId, seasonId, fetch, authorization, options)(fetch, basePath);
        },
        /**
         * Returns the list of players currently playing for the given team
         * @summary Teams squad
         * @param {string} wyId Relevant content id
         * @param {string} [seasonId] Relevant season id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;team&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdSquadGet(wyId, seasonId, fetch, authorization, options) {
            return TeamsApiFp(configuration).teamsWyIdSquadGet(wyId, seasonId, fetch, authorization, options)(fetch, basePath);
        },
        /**
         * Retrieves all the transfer's information for the given team
         * @summary Teams transfers
         * @param {string} wyId Relevant content id
         * @param {string} [toDate] Ending date in YYYY-MM-DD format
         * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;, &#x60;player&#x60;
         * @param {string} [fromDate] Starting date in YYYY-MM-DD format
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        teamsWyIdTransfersGet(wyId, toDate, details, fromDate, authorization, options) {
            return TeamsApiFp(configuration).teamsWyIdTransfersGet(wyId, toDate, details, fromDate, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
    /**
     * Returns all the team career information
     * @summary Team careers
     * @param {string} wyId Relevant content id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;team&#x60;
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;season&#x60;, &#x60;competition&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    teamsWyIdCareerGet(wyId, fetch, details, authorization, options) {
        return TeamsApiFp(this.configuration).teamsWyIdCareerGet(wyId, fetch, details, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Retrieves all the fixtures matches for the given team.
     * @summary Teams fixtures
     * @param {string} wyId Relevant content id
     * @param {string} [toDate] Ending date in YYYY-MM-DD format
     * @param {string} [fromDate] Starting date in YYYY-MM-DD format
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    teamsWyIdFixturesGet(wyId, toDate, fromDate, authorization, options) {
        return TeamsApiFp(this.configuration).teamsWyIdFixturesGet(wyId, toDate, fromDate, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns info about the given team
     * @summary Team details
     * @param {string} wyId
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    teamsWyIdGet(wyId, authorization, options) {
        return TeamsApiFp(this.configuration).teamsWyIdGet(wyId, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns the list of matches played by the given team
     * @summary Teams matches
     * @param {string} wyId Relevant content id
     * @param {string} [seasonId] Relevant season id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;team&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    teamsWyIdMatchesGet(wyId, seasonId, fetch, authorization, options) {
        return TeamsApiFp(this.configuration).teamsWyIdMatchesGet(wyId, seasonId, fetch, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Returns the list of players currently playing for the given team
     * @summary Teams squad
     * @param {string} wyId Relevant content id
     * @param {string} [seasonId] Relevant season id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;team&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    teamsWyIdSquadGet(wyId, seasonId, fetch, authorization, options) {
        return TeamsApiFp(this.configuration).teamsWyIdSquadGet(wyId, seasonId, fetch, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Retrieves all the transfer's information for the given team
     * @summary Teams transfers
     * @param {string} wyId Relevant content id
     * @param {string} [toDate] Ending date in YYYY-MM-DD format
     * @param {string} [details] List of related objects to be detailed, separated by comma: &#x60;teams&#x60;, &#x60;player&#x60;
     * @param {string} [fromDate] Starting date in YYYY-MM-DD format
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    teamsWyIdTransfersGet(wyId, toDate, details, fromDate, authorization, options) {
        return TeamsApiFp(this.configuration).teamsWyIdTransfersGet(wyId, toDate, details, fromDate, authorization, options)(this.fetch, this.basePath);
    }
}
/**
 * VideosApi - fetch parameter creator
 * @export
 */
export const VideosApiFetchParamCreator = function (configuration) {
    return {
        /**
         * Returns links to match footage and info about the given video.  When used with \"start\" and \"end\" optional parameters the endpoint  allows to build custom video clips. Example: /videos/{matchId}?start=100&end=120    Our commercial model allows a max number of minutes of usage per month for accessing API Videos.     Please note: anytime the endpoint is called and the video links are generated the related amount of seconds will be counted, even if the user would not effectively click on the link.    Counters are on linking generation, not on effective video usage. You can check response headers for information about your current usage status.    In order not to consume minutes of videos when building videoclips, when you need to know video offset values or to check for the availability of a certain video quality, you can use videos/wyid/offsets and videos/wyid/qualities.     Please note: FullHD quality links require a specific commercial package.
         * @summary Videos
         * @param {string} matchId Relevant match id
         * @param {string} [start] Start second of the custom videoclip
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;match&#x60;
         * @param {string} [quality] Returns a specific video quality only (lq, sd, hd, fullhd)
         * @param {string} [authorization]
         * @param {string} [end] End second of the custom videoclip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdGet(matchId, start, fetch, quality, authorization, end, options = {}) {
            // verify required parameter 'matchId' is not null or undefined
            if (matchId === null || matchId === undefined) {
                throw new RequiredError('matchId', 'Required parameter matchId was null or undefined when calling videosMatchIdGet.');
            }
            const localVarPath = `/videos/{matchId}`
                .replace(`{${"matchId"}}`, encodeURIComponent(String(matchId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (start !== undefined) {
                localVarQueryParameter['start'] = start;
            }
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (quality !== undefined) {
                localVarQueryParameter['quality'] = quality;
            }
            if (end !== undefined) {
                localVarQueryParameter['end'] = end;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about the given match video periods offsets
         * @summary Videos offsets
         * @param {string} matchId Relevant match id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;match&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdOffsetsGet(matchId, fetch, authorization, options = {}) {
            // verify required parameter 'matchId' is not null or undefined
            if (matchId === null || matchId === undefined) {
                throw new RequiredError('matchId', 'Required parameter matchId was null or undefined when calling videosMatchIdOffsetsGet.');
            }
            const localVarPath = `/videos/{matchId}/offsets`
                .replace(`{${"matchId"}}`, encodeURIComponent(String(matchId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (fetch !== undefined) {
                localVarQueryParameter['fetch'] = fetch;
            }
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Information about the existing video qualities for a given match
         * @summary Videos qualities
         * @param {string} matchId Relevant match id
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdQualitiesGet(matchId, authorization, options = {}) {
            // verify required parameter 'matchId' is not null or undefined
            if (matchId === null || matchId === undefined) {
                throw new RequiredError('matchId', 'Required parameter matchId was null or undefined when calling videosMatchIdQualitiesGet.');
            }
            const localVarPath = `/videos/{matchId}/qualities`
                .replace(`{${"matchId"}}`, encodeURIComponent(String(matchId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * VideosApi - functional programming interface
 * @export
 */
export const VideosApiFp = function (configuration) {
    return {
        /**
         * Returns links to match footage and info about the given video.  When used with \"start\" and \"end\" optional parameters the endpoint  allows to build custom video clips. Example: /videos/{matchId}?start=100&end=120    Our commercial model allows a max number of minutes of usage per month for accessing API Videos.     Please note: anytime the endpoint is called and the video links are generated the related amount of seconds will be counted, even if the user would not effectively click on the link.    Counters are on linking generation, not on effective video usage. You can check response headers for information about your current usage status.    In order not to consume minutes of videos when building videoclips, when you need to know video offset values or to check for the availability of a certain video quality, you can use videos/wyid/offsets and videos/wyid/qualities.     Please note: FullHD quality links require a specific commercial package.
         * @summary Videos
         * @param {string} matchId Relevant match id
         * @param {string} [start] Start second of the custom videoclip
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;match&#x60;
         * @param {string} [quality] Returns a specific video quality only (lq, sd, hd, fullhd)
         * @param {string} [authorization]
         * @param {string} [end] End second of the custom videoclip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdGet(matchId, start, fetch, quality, authorization, end, options) {
            const localVarFetchArgs = VideosApiFetchParamCreator(configuration).videosMatchIdGet(matchId, start, fetch, quality, authorization, end, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Information about the given match video periods offsets
         * @summary Videos offsets
         * @param {string} matchId Relevant match id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;match&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdOffsetsGet(matchId, fetch, authorization, options) {
            const localVarFetchArgs = VideosApiFetchParamCreator(configuration).videosMatchIdOffsetsGet(matchId, fetch, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Information about the existing video qualities for a given match
         * @summary Videos qualities
         * @param {string} matchId Relevant match id
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdQualitiesGet(matchId, authorization, options) {
            const localVarFetchArgs = VideosApiFetchParamCreator(configuration).videosMatchIdQualitiesGet(matchId, authorization, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
/**
 * VideosApi - factory interface
 * @export
 */
export const VideosApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * Returns links to match footage and info about the given video.  When used with \"start\" and \"end\" optional parameters the endpoint  allows to build custom video clips. Example: /videos/{matchId}?start=100&end=120    Our commercial model allows a max number of minutes of usage per month for accessing API Videos.     Please note: anytime the endpoint is called and the video links are generated the related amount of seconds will be counted, even if the user would not effectively click on the link.    Counters are on linking generation, not on effective video usage. You can check response headers for information about your current usage status.    In order not to consume minutes of videos when building videoclips, when you need to know video offset values or to check for the availability of a certain video quality, you can use videos/wyid/offsets and videos/wyid/qualities.     Please note: FullHD quality links require a specific commercial package.
         * @summary Videos
         * @param {string} matchId Relevant match id
         * @param {string} [start] Start second of the custom videoclip
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;match&#x60;
         * @param {string} [quality] Returns a specific video quality only (lq, sd, hd, fullhd)
         * @param {string} [authorization]
         * @param {string} [end] End second of the custom videoclip
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdGet(matchId, start, fetch, quality, authorization, end, options) {
            return VideosApiFp(configuration).videosMatchIdGet(matchId, start, fetch, quality, authorization, end, options)(fetch, basePath);
        },
        /**
         * Information about the given match video periods offsets
         * @summary Videos offsets
         * @param {string} matchId Relevant match id
         * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;match&#x60;
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdOffsetsGet(matchId, fetch, authorization, options) {
            return VideosApiFp(configuration).videosMatchIdOffsetsGet(matchId, fetch, authorization, options)(fetch, basePath);
        },
        /**
         * Information about the existing video qualities for a given match
         * @summary Videos qualities
         * @param {string} matchId Relevant match id
         * @param {string} [authorization]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        videosMatchIdQualitiesGet(matchId, authorization, options) {
            return VideosApiFp(configuration).videosMatchIdQualitiesGet(matchId, authorization, options)(fetch, basePath);
        },
    };
};
/**
 * VideosApi - object-oriented interface
 * @export
 * @class VideosApi
 * @extends {BaseAPI}
 */
export class VideosApi extends BaseAPI {
    /**
     * Returns links to match footage and info about the given video.  When used with \"start\" and \"end\" optional parameters the endpoint  allows to build custom video clips. Example: /videos/{matchId}?start=100&end=120    Our commercial model allows a max number of minutes of usage per month for accessing API Videos.     Please note: anytime the endpoint is called and the video links are generated the related amount of seconds will be counted, even if the user would not effectively click on the link.    Counters are on linking generation, not on effective video usage. You can check response headers for information about your current usage status.    In order not to consume minutes of videos when building videoclips, when you need to know video offset values or to check for the availability of a certain video quality, you can use videos/wyid/offsets and videos/wyid/qualities.     Please note: FullHD quality links require a specific commercial package.
     * @summary Videos
     * @param {string} matchId Relevant match id
     * @param {string} [start] Start second of the custom videoclip
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;match&#x60;
     * @param {string} [quality] Returns a specific video quality only (lq, sd, hd, fullhd)
     * @param {string} [authorization]
     * @param {string} [end] End second of the custom videoclip
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApi
     */
    videosMatchIdGet(matchId, start, fetch, quality, authorization, end, options) {
        return VideosApiFp(this.configuration).videosMatchIdGet(matchId, start, fetch, quality, authorization, end, options)(this.fetch, this.basePath);
    }
    /**
     * Information about the given match video periods offsets
     * @summary Videos offsets
     * @param {string} matchId Relevant match id
     * @param {string} [fetch] List of related objects to be fetched, separated by comma: &#x60;match&#x60;
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApi
     */
    videosMatchIdOffsetsGet(matchId, fetch, authorization, options) {
        return VideosApiFp(this.configuration).videosMatchIdOffsetsGet(matchId, fetch, authorization, options)(this.fetch, this.basePath);
    }
    /**
     * Information about the existing video qualities for a given match
     * @summary Videos qualities
     * @param {string} matchId Relevant match id
     * @param {string} [authorization]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VideosApi
     */
    videosMatchIdQualitiesGet(matchId, authorization, options) {
        return VideosApiFp(this.configuration).videosMatchIdQualitiesGet(matchId, authorization, options)(this.fetch, this.basePath);
    }
}
